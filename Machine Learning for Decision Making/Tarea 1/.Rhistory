head(df)
# Unifico las 3 bases de datos en una base de datos principal llamada df.
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
# Reordeno el data frame de manera más organizada
df <- df %>% select(id_oferta, fecha_publicacion, salario_oferta, area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato, area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
head(df)
# Agrego una columna adicional llamada check_area donde se compara area_oferta con area_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_area = ifelse(area_oferta == area_candidato, 1, 0))
head(df)
# Agrego una columna adicional llamada check_tipo_contrato donde se compara tipo_contrato_oferta con tipo_contrato_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_tipo_contrato = ifelse(tipo_contrato_oferta == tipo_contrato_candidato, 1,
ifelse(tipo_contrato_candidato == "indiferente", 1, 0)))
head(df)
# Agrego columna donde se resta fecha_aplicacion menos fecha_publicacion para determinar dias_desde_publicacion_oferta
df <- df %>%
mutate(dias_desde_publicacion_oferta = as.Date(fecha_aplicacion) - as.Date(fecha_publicacion))
head(df)
# Agrego columna donde se resta salario_oferta menos salario_candidato
df <- df %>%
mutate(diferencia_salario = salario_oferta - salario_candidato)
head(df)
# Unifico las 3 bases de datos en una base de datos principal llamada df.
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
# Reordeno el data frame de manera más organizada
df <- df %>% select(id_oferta, fecha_publicacion, salario_oferta, area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato, area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
head(df)
# Agrego una columna adicional llamada check_area donde se compara area_oferta con area_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_area = ifelse(area_oferta == area_candidato, 1, 0))
head(df)
# Bases de datos
ofertas_raw <- read.csv("ofertas.csv")
candidatos_raw <- read.csv("candidatos.csv")
aplicaciones_raw <- read.csv("aplicaciones.csv")
# Selección de variables con valores
candidatos_raw <- candidatos_raw %>%
select(colnames(candidatos_raw)[1:6])
aplicaciones_raw <- aplicaciones_raw %>%
select(colnames(aplicaciones_raw)[1:4])
# Declaración del objeto del as of date.
as_of_date <- as.Date("2020-06-01")
as_of_date
# Filtrado de datos posteriores al as of date y renombre de columnas para diferenciar los datos que provienen de ofertas de los que provienen de candidatos.
ofertas <- ofertas_raw %>%
filter(fecha_publicacion < as_of_date) %>%
rename(salario_oferta = salario, area_oferta = area, tipo_contrato_oferta = tipo_contrato)
ofertas[3,5] <- "permanente"
candidatos <- candidatos_raw %>%
filter(fecha_registro < as_of_date) %>%
rename(salario_candidato = salario, area_candidato = area, tipo_contrato_candidato = tipo_contrato) %>%
group_by(id_candidato) %>%
slice(which.max(as.Date(fecha_registro))) # Dejo solamente las últimas actualizaciones de los candidatos.
aplicaciones <- aplicaciones_raw %>%
filter(fecha_aplicacion < as_of_date, id_candidato != 8)  # Filtré al candidato 8 con fechas irregulares.
head(ofertas)
head(candidatos)
head(aplicaciones)
# Unifico las 3 bases de datos en una base de datos principal llamada df.
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
# Reordeno el data frame de manera más organizada
df <- df %>% select(id_oferta, fecha_publicacion, salario_oferta, area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato, area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
head(df)
# Agrego una columna adicional llamada check_area donde se compara area_oferta con area_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_area = ifelse(area_oferta == area_candidato, 1, 0))
head(df)
# Agrego una columna adicional llamada check_tipo_contrato donde se compara tipo_contrato_oferta con tipo_contrato_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_tipo_contrato = ifelse(tipo_contrato_oferta == tipo_contrato_candidato, 1,
ifelse(tipo_contrato_candidato == "indiferente", 1, 0)))
head(df)
# Agrego columna donde se resta fecha_aplicacion menos fecha_publicacion para determinar dias_desde_publicacion_oferta
df <- df %>%
mutate(dias_desde_publicacion_oferta = as.Date(fecha_aplicacion) - as.Date(fecha_publicacion))
head(df)
# Agrego columna donde se resta salario_oferta menos salario_candidato
df <- df %>%
mutate(diferencia_salario = salario_oferta - salario_candidato)
head(df)
# Hago una matriz donde se cuenten solamente las aplicaciones realizadas un mes antes del as_of_date.
num_aplicaciones_mes <- tally(group_by(filter(df, fecha_aplicacion > (as_of_date-30)), id_candidato))
#Agrego la cuenta de aplicaciones al data frame principal df.
df <- merge(df, num_aplicaciones_mes, "id_candidato")
head(df)
cohort <- df %>%
select(id_candidato, id_oferta, fecha_aplicacion, check_area, check_tipo_contrato,
dias_desde_publicacion_oferta, diferencia_salario, num_aplicaciones_mes = n,
label = contratado)
cohort
tinytex::install_tinytex()
View(cohort)
?data.frame
View(candidatos)
View(ofertas)
View(aplicaciones)
View(candidatos)
View(candidatos)
View(ofertas)
id <- 0
id_df <- matrix(ncol = 2)
View(id_df)
id_df <- data.frame(ncol = 2)
View(id_df)
id_df <- matrix(nrow = 580, ncol = 2)
View(id_df)
?as.data.frame
id_df <- as.data.frame(id_df, row.names = 1:580)
View(id_df)
id_df$V1 <- "id"
View(id_df)
id_df <- matrix(nrow = 580, ncol = 2)
id_df <- as.data.frame(id_df, row.names = 1:580)
View(id_df)
colnames(id_df)
colnames(id_df$V1) <- "id"
id_df <- matrix(nrow = 580, ncol = 2) %>%
as.data.frame(id_df, row.names = 1:580)
# Librerías
library(dplyr)
library(tidyverse)
id_df <- matrix(nrow = 580, ncol = 2) %>%
as.data.frame(id_df, row.names = 1:580)
?paste
df <- mutate(df, id_aplicacion = paste(df$id_candidato,df$id_oferta))
View(df)
df <- df %>% select(id_aplicacion, id_oferta, fecha_publicacion,
salario_oferta,area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato,
area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
View(df)
id <- 0
id_df <- matrix(nrow = 580, ncol = 1)
id_df <- as.data.frame(id_df, row.names = 1:580)
id_df <- mutate(id_df, V1 = "id_aplicacion")
View(id_df)
id <- 0
id_df <- matrix(nrow = 580, ncol = 1)
id_df <- as.data.frame(id_df, row.names = 1:580)
id_df <- rename(V1 = id_aplicacion)
View(id_df)
id_df <- rename(V1 = id_aplicacion)
id <- 0
id_df <- matrix(nrow = 580, ncol = 1)
id_df <- as.data.frame(id_df, row.names = 1:580)
id_df <- rename(V1 = "id_aplicacion")
id <- 0
id_df <- matrix(nrow = 580, ncol = 1)
id_df <- as.data.frame(id_df, row.names = 1:580)
id_df <- rename(id_aplicacion = V1)
View(id_df)
?rename
id_df <- rename(id_df, id_aplicacion = V1)
View(id_df)
remove(id)
for (c in candidatos$id_candidato){
for(o in ofertas$id_oferta){
n = n + 1
id_df[n,1] = paste(c,o)
}
}
n <- as.numeric(0)
id_df <- matrix(nrow = 580, ncol = 1)
id_df <- as.data.frame(id_df, row.names = 1:580)
id_df <- rename(id_df, id_aplicacion = V1)
for (c in candidatos$id_candidato){
for(o in ofertas$id_oferta){
n = n + 1
id_df[n,1] = paste(c,o)
}
}
View(id_df)
df <- merge(id_df, df, by = "id_aplicacion")
View(df)
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
df <- mutate(df, id_aplicacion = paste(df$id_candidato,df$id_oferta))
df <- df %>% select(id_aplicacion, id_oferta, fecha_publicacion,
salario_oferta,area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato,
area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
df <- merge(id_df, df, by = "id_aplicacion", all.x = TRUE)
View(df)
head(df)
View(id_df)
# Unifico las 3 bases de datos en una base de datos principal llamada df.
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
df <- mutate(df, id_aplicacion = paste(df$id_candidato,df$id_oferta))
# Reordeno el data frame de manera más organizada
df <- df %>% select(id_aplicacion, id_oferta, fecha_publicacion,
salario_oferta,area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato,
area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
# Unifico los id_aplicacion para contar con observaciones de todas las
#   posibles combinaciones de candidatos y aplicaciones en mi data frame
#   principal.
df <- merge(id_df, df, by = "id_aplicacion", all.x = TRUE)
head(df)
# Agrego una columna adicional llamada check_area donde se compara area_oferta
#  con area_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_area = ifelse(area_oferta == area_candidato, 1, 0))
head(df)
# Agrego una columna adicional llamada check_tipo_contrato donde se compara
#   tipo_contrato_oferta con tipo_contrato_candidato para determinar
#   si hay coincidencia.
df <- df %>%
mutate(check_tipo_contrato =
ifelse(tipo_contrato_oferta == tipo_contrato_candidato, 1,
ifelse(tipo_contrato_candidato == "indiferente", 1, 0)))
head(df)
# Agrego columna donde se resta fecha_aplicacion menos fecha_publicacion para
#   determinar dias_desde_publicacion_oferta
df <- df %>%
mutate(dias_desde_publicacion_oferta =
as.Date(fecha_aplicacion) - as.Date(fecha_publicacion))
head(df)
# Agrego columna donde se resta salario_oferta menos salario_candidato
df <- df %>%
mutate(diferencia_salario = salario_oferta - salario_candidato)
head(df)
# Hago una matriz donde se cuenten solamente las aplicaciones realizadas un mes
#   antes del as_of_date.
num_aplicaciones_mes <-
tally(group_by(filter(df, fecha_aplicacion > (as_of_date-30)), id_candidato))
#Agrego la cuenta de aplicaciones al data frame principal df.
df <- merge(df, num_aplicaciones_mes, "id_candidato")
head(df)
cohort <- df %>%
select(id_candidato, id_oferta, fecha_aplicacion, check_area,
check_tipo_contrato,dias_desde_publicacion_oferta, diferencia_salario,
num_aplicaciones_mes = n, label = contratado)
cohort
View(cohort)
# Unifico las 3 bases de datos en una base de datos principal llamada df.
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
df <- mutate(df, id_aplicacion = paste(df$id_candidato,df$id_oferta))
# Reordeno el data frame de manera más organizada
df <- df %>% select(id_aplicacion, id_oferta, fecha_publicacion,
salario_oferta,area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato,
area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
# Unifico los id_aplicacion para contar con observaciones de todas las
#   posibles combinaciones de candidatos y aplicaciones en mi data frame
#   principal.
df <- merge(id_df, df, by = "id_aplicacion", all.x = TRUE)
head(df)
# Agrego una columna adicional llamada check_area donde se compara area_oferta
#  con area_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_area = ifelse(area_oferta == area_candidato, 1, 0))
head(df)
# Agrego una columna adicional llamada check_tipo_contrato donde se compara
#   tipo_contrato_oferta con tipo_contrato_candidato para determinar
#   si hay coincidencia.
df <- df %>%
mutate(check_tipo_contrato =
ifelse(tipo_contrato_oferta == tipo_contrato_candidato, 1,
ifelse(tipo_contrato_candidato == "indiferente", 1, 0)))
head(df)
# Agrego columna donde se resta fecha_aplicacion menos fecha_publicacion para
#   determinar dias_desde_publicacion_oferta
df <- df %>%
mutate(dias_desde_publicacion_oferta =
as.Date(fecha_aplicacion) - as.Date(fecha_publicacion))
head(df)
# Agrego columna donde se resta salario_oferta menos salario_candidato
df <- df %>%
mutate(diferencia_salario = salario_oferta - salario_candidato)
head(df)
# Hago una matriz donde se cuenten solamente las aplicaciones realizadas un mes
#   antes del as_of_date.
num_aplicaciones_mes <-
tally(group_by(filter(df, fecha_aplicacion > (as_of_date-30)), id_candidato))
#Agrego la cuenta de aplicaciones al data frame principal df.
df <- merge(df, num_aplicaciones_mes, "id_candidato", all.x = TRUE)
head(df)
cohort <- df %>%
select(id_candidato, id_oferta, fecha_aplicacion, check_area,
check_tipo_contrato,dias_desde_publicacion_oferta, diferencia_salario,
num_aplicaciones_mes = n, label = contratado)
cohort
View(cohort)
View(cohort)
View(df)
# Hago un dataframe que enumere todas las combinaciones de candidatos
#   aplicando a todas las posibles vacantes y les asigne un id.
n <- as.numeric(0)
id_df <- matrix(nrow = 580, ncol = 3)
id_df <- as.data.frame(id_df, row.names = 1:580)
id_df <- rename(id_df, id_aplicacion = V1, id_candidato = V2,
id_oferta = V3)
for (c in candidatos$id_candidato){
for(o in ofertas$id_oferta){
n = n + 1
id_df[n,1] = paste(c,o)
id_df[n,2] = c
id_df[n,3] = o
}
}
View(id_df)
View(df)
# Unifico las 3 bases de datos en una base de datos principal llamada df.
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
df <- mutate(df, id_aplicacion = paste(df$id_candidato,df$id_oferta))
# Reordeno el data frame de manera más organizada
df <- df %>% select(id_aplicacion, id_oferta, fecha_publicacion,
salario_oferta,area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato,
area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
# Unifico los id_aplicacion para contar con observaciones de todas las
#   posibles combinaciones de candidatos y aplicaciones en mi data frame
#   principal.
df <- merge(id_df, df, by = "id_aplicacion", all.x = TRUE, no.dups = TRUE)
head(df)
View(df)
aplicaciones <- aplicaciones_raw %>%
filter(fecha_aplicacion < as_of_date, id_candidato != 8) %>%
mutate(id_aplicacion = paste(id_candidato,id_oferta))
View(aplicaciones_raw)
View(aplicaciones)
aplicaciones <-
merge(id_df, df, by = "id_aplicacion", all.x = TRUE,
no.dups = TRUE)
View(aplicaciones)
aplicaciones <-
merge(id_df, df, by = "id_aplicacion", all.x = TRUE,
no.dups = FALSE)
View(aplicaciones)
aplicaciones <- aplicaciones_raw %>%
filter(fecha_aplicacion < as_of_date, id_candidato != 8) %>%
mutate(id_aplicacion = paste(id_candidato,id_oferta))
aplicaciones <-
merge(id_df, aplicaciones, by = "id_aplicacion", all.x = TRUE,
no.dups = TRUE)
View(aplicaciones)
View(aplicaciones)
aplicaciones <- select(aplicaciones, id_aplicacion,
id_candidato = id_candidato.x,
id_oferta = id_oferta.x, fecha_aplicacion,
contratado)
View(aplicaciones)
df <- merge(aplicaciones,ofertas, by = "id_oferta")
View(df)
df <- merge(candidatos,df, by = "id_candidato")
df <- df %>% select(id_aplicacion, id_oferta, fecha_publicacion,
salario_oferta,area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato,
area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
View(df)
# Unifico las 3 bases de datos en una base de datos principal llamada df.
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
# Reordeno el data frame de manera más organizada
df <- df %>% select(id_aplicacion, id_oferta, fecha_publicacion,
salario_oferta,area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato,
area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
head(df)
# Agrego una columna adicional llamada check_area donde se compara area_oferta
#  con area_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_area = ifelse(area_oferta == area_candidato, 1, 0))
head(df)
# Agrego una columna adicional llamada check_tipo_contrato donde se compara
#   tipo_contrato_oferta con tipo_contrato_candidato para determinar
#   si hay coincidencia.
df <- df %>%
mutate(check_tipo_contrato =
ifelse(tipo_contrato_oferta == tipo_contrato_candidato, 1,
ifelse(tipo_contrato_candidato == "indiferente", 1, 0)))
head(df)
# Agrego columna donde se resta fecha_aplicacion menos fecha_publicacion para
#   determinar dias_desde_publicacion_oferta
df <- df %>%
mutate(dias_desde_publicacion_oferta =
as.Date(fecha_aplicacion) - as.Date(fecha_publicacion))
head(df)
# Agrego columna donde se resta salario_oferta menos salario_candidato
df <- df %>%
mutate(diferencia_salario = salario_oferta - salario_candidato)
head(df)
# Hago una matriz donde se cuenten solamente las aplicaciones realizadas un mes
#   antes del as_of_date.
num_aplicaciones_mes <-
tally(group_by(filter(df, fecha_aplicacion > (as_of_date-30)), id_candidato))
#Agrego la cuenta de aplicaciones al data frame principal df.
df <- merge(df, num_aplicaciones_mes, "id_candidato", all.x = TRUE)
head(df)
cohort <- df %>%
select(id_candidato, id_oferta, fecha_aplicacion, check_area,
check_tipo_contrato,dias_desde_publicacion_oferta, diferencia_salario,
num_aplicaciones_mes = n, label = contratado)
cohort
View(cohort)
View(num_aplicaciones_mes)
View(df)
# Hago una matriz donde se cuenten solamente las aplicaciones realizadas un mes
#   antes del as_of_date.
num_aplicaciones_mes <-
tally(group_by(filter(df, fecha_aplicacion > (as_of_date-30)), id_candidato))
#Agrego la cuenta de aplicaciones al data frame principal df.
df <- merge(df, num_aplicaciones_mes, "id_candidato", all.x = TRUE)
if (df$)
View(df)
remove(df$n.y)
# Unifico las 3 bases de datos en una base de datos principal llamada df.
df <- merge(aplicaciones,ofertas, by = "id_oferta")
df <- merge(candidatos,df, by = "id_candidato")
# Reordeno el data frame de manera más organizada
df <- df %>% select(id_aplicacion, id_oferta, fecha_publicacion,
salario_oferta,area_oferta, tipo_contrato_oferta,
id_candidato, fecha_registro, salario_candidato,
area_candidato, grado_academico,
tipo_contrato_candidato, fecha_aplicacion, contratado)
head(df)
View(df)
# Agrego una columna adicional llamada check_area donde se compara area_oferta
#  con area_candidato para determinar si hay coincidencia.
df <- df %>%
mutate(check_area = ifelse(area_oferta == area_candidato, 1, 0))
head(df)
# Agrego una columna adicional llamada check_tipo_contrato donde se compara
#   tipo_contrato_oferta con tipo_contrato_candidato para determinar
#   si hay coincidencia.
df <- df %>%
mutate(check_tipo_contrato =
ifelse(tipo_contrato_oferta == tipo_contrato_candidato, 1,
ifelse(tipo_contrato_candidato == "indiferente", 1, 0)))
head(df)
# Agrego columna donde se resta fecha_aplicacion menos fecha_publicacion para
#   determinar dias_desde_publicacion_oferta
df <- df %>%
mutate(dias_desde_publicacion_oferta =
as.Date(fecha_aplicacion) - as.Date(fecha_publicacion))
head(df)
# Agrego columna donde se resta salario_oferta menos salario_candidato
df <- df %>%
mutate(diferencia_salario = salario_oferta - salario_candidato)
head(df)
View(df)
# Hago una matriz donde se cuenten solamente las aplicaciones realizadas un mes
#   antes del as_of_date.
num_aplicaciones_mes <-
tally(group_by(filter(df, fecha_aplicacion > (as_of_date-30)), id_candidato))
#Agrego la cuenta de aplicaciones al data frame principal df.
df <- merge(df, num_aplicaciones_mes, "id_candidato", all.x = TRUE)
head(df)
View(df)
?is.na
if (is.na(df$n)) {
df$n = 0
}
View(df)
for (i in df$id_aplicacion){
if (is.na(df$n)){
df$n = 0
}
}
View(df)
View(df)
j = as.numeric(0)
for (i in df$id_aplicacion){
if (is.na(df$n)){
j = j+1
df[j, col_number(df$n)]
}
}
j = as.numeric(0)
for (i in df$id_aplicacion){
if (is.na(df$n)){
j = j+1
df[j, 19] = 0
}
}
j = as.numeric(1)
for (i in df$id_aplicacion){
if (is.na(df[j, 19])){
df[j, 19] = 0
}
j = j+1
}
View(df)
View(df)
cohort <- df %>%
select(id_aplicacion, id_candidato, id_oferta, fecha_aplicacion,
check_area, check_tipo_contrato,
dias_desde_publicacion_oferta, diferencia_salario,
num_aplicaciones_mes = n, label = contratado)
cohort
View(cohort)
?head
