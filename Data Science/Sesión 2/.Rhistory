install.packages("rjson")
library(rjson)
trello_json <-
fromJSON(file = "C:\Users\Guillermo GC\Downloads\exported.json")
trello_json <-
fromJSON(file = "C:/Users/Guillermo GC/Downloads/exported.json")
# Imprimo el resultado
print(trello_json)
# Convert JSON file to a data frame.
trello_df <- as.data.frame(trello_json)
#install.packages("rjson")
install.packages("jsonlite")
library(jsonlite)
data_raw <- enframe(unlist(trello_json))
data_raw <- enframe(unlist(trello_json))
library("tibble")
data_raw <- enframe(unlist(trello_json))
data_raw
View(data_raw)
View(data_raw)
View(data_raw)
data_raw %>% separate(name, into = c(paste0("x", 1:1000)))
library(tidyr)
data_raw %>% separate(name, into = c(paste0("x", 1:1000)))
View(data_raw)
data_new <-
data_raw %>% separate(name, into = c(paste0("x", 1:1000)))
View(data_new)
data_new <-
data_raw %>%
data_raw %>%
separate(name, into = c(paste0("x", 1:1000)), fill = "right")
data_new <-
data_raw %>%
separate(name, into = c(paste0("x", 1:1000)), fill = "right")
View(data_new)
n_cols_max
rgx_split <- "\\."
n_cols_max <-
data_raw %>%
pull(name) %>%
str_split(rgx_split) %>%
map_dbl(~length(.)) %>%
max()
n_cols_max
n_cols_max <-
data_raw %>%
pull(name) %>%
str_split(rgx_split) %>%
map_dbl(~length(.)) %>%
max()
?map_dbl
install.packages("purrr")
library(purrr)
n_cols_max <-
data_raw %>%
pull(name) %>%
str_split(rgx_split) %>%
map_dbl(~length(.)) %>%
max()
?str_split
install.packages("stringr")
library(stringr)
n_cols_max <-
data_raw %>%
pull(name) %>%
str_split(rgx_split) %>%
map_dbl(~length(.)) %>%
max()
library(dplyr)
n_cols_max <-
data_raw %>%
pull(name) %>%
str_split(rgx_split) %>%
map_dbl(~length(.)) %>%
max()
n_cols_max
View(trello_json)
class(data_raw)
class(trello_json)
class(data_new)
View(trello_json)
data_new <-
data_raw %>%
separate(name, into = c(paste0("x", 1:38)), fill = "right")
data_new <-
data_raw %>%
separate(name, into = c(paste0("x", 1:1000)), fill = "right")
data_new <-
data_raw %>%
separate(name, into = c(paste0("x", 1:38)))
library(tibble)
library(tidyr)
library(purrr)
library(stringr)
library(dplyr)
data_new <-
data_raw %>%
separate(name, into = c(paste0("x", 1:1000)))
data_new <-
data_raw %>%
separate(name, into = c(paste0("x", 1:1000)), fill = "right")
data_new <-
data_raw %>%
separate(name, into = c(paste0("x", 1:38)), fill = "right")
View(data_new)
data_new <-
data_raw %>%
separate(name, into = c(paste0("x", 1:1000)), fill = "right")
View(data_new)
nms_sep <- paste0("name", 1:n_cols_max)
data_sep <-
data_raw %>%
separate(name, into = nms_sep, sep = rgx_split, fill = "right")
data_sep
View(data_sep)
write.csv(nms_sep,"C:/Users/Guillermo GC/Downloads/exported.csv", row.names = FALSE)
write.csv(data_sep,"C:/Users/Guillermo GC/Downloads/exported.csv", row.names = FALSE)
#Instalar librería
install.packages("deSolve")
#Ejecutar librería
library(deSolve)
#======================================================================================
#Part 1: Load the model to your R session
#=======================================================================================
#Load required libraries for the ediam model
library(deSolve)
library(shiny)
library(ggplot2)
library(Rmisc)
library(scales)
library(extrafont)
library(data.table)
library(reshape2)
#Load the Ediam model to your R session
#specify directory where you have saved the model
#  dir.model<-"C:\\Users\\L03054557\\OneDrive\\Edmundo-ITESM\\2.Cursos Impartidos\\Modelacion Avanzada\\2019\\Semestral\\Seminarios\\Semana 4\\"
dir.model<-r"(C:\Users\Guillermo GC\Dropbox\TEC MTY MPE\7o Trimestre\Métodos para el análisis de decisiones bajo incertidumbre\Seminarios\2022-09-14 Seminario 1\)"
#specify the model version you are using
model.version<-"ediam_8_23_2016.r"
#load the model in your session
source(paste(dir.model,model.version,sep=""))
#check de model has beeen correctly loaded
ediam
##############################################################################################
#=============================================================================================
#Part 2: Run the model once
#=============================================================================================
#The Ediam model requires two input vectors
#Choose your policy
#Define your policy
policies<-c(
#carbon tax
tax.rate.N=0.5,
tax.rate.S=0.6,
#Technology push in Advanced Region
epsi.re.subsidy.N = 0.3, #Technology subsidy in Advanced Region
s.re.subsidy.N = 2.0, #R&D subsidy in Advanced Region
#Technology push in Emerging Region
epsi.re.subsidy.S = 0.5, #Technology subsidy in Emerging Region
epsi.re.GFsubsidy.N = 0.0,#Technology subsidy in GCF
s.re.subsidy.S = 1.0, #R&D subsidy in Emerging Region
s.re.GFsubsidy.N = 0.0) #R&D subsidy in GCF
#Define the model parameters
params<-c(
CO2.Concentration.0 = 382.2461, #
TimeStep = as.numeric(5),#
EndTime = as.numeric(500), #
alfa = 0.33,
epsilon = 5.0, #elasticity of subsitution
Gamma.re = 0.25, #R&D returns SETs
k.re = as.numeric(0.0),#
Gamma.ce = 0.25, #R&D returns FETs
k.ce = as.numeric(0.0),#
Eta.re = 0.02, #Innovation propensity SETs
Eta.ce = 0.02, #Innovation propensity FETs
Nu.re = 0.02,  #Transferability SETs
Nu.ce = 0.02,  #Transferability FETs
qsi = as.numeric(0.0100539),#
Delta.S = 0.001822767,
Delta.Temp.Disaster = as.numeric(6.0),#
Beta.Delta.Temp = 5.0,
CO2.base = 289.415,
labor.growth_N = as.numeric(0),# Population growth Advanced Region
labor.growth_S = as.numeric(0),# Population growth Emerging Region
lambda.S = 0.1443,
sigma.utility = 2.0,
rho = 0.008, #Discount rate
Yre.0_N = 45.55,
Yce.0_N = 193.2,
Yre.0_S = 27.82,
Yce.0_S = 257.54,
size.factor = as.numeric(4.0),#
Run.ID = as.numeric(1.0)
)
#Now run the model with the specified vector and policy
#your results will be stored in the object out
out<-ediam(policies,params)
#explore the data
head(out)
#############################################################################################################################
#=============================================================================================
#Part 3: Graph your results
#=============================================================================================
#In Ediam sometimes is worthwhile looking at changes in regions using the same Graph
#to accomplish this we need to make a transformation to the data
#create function to use regional data layout
data.by.region<-function(data,id.vars,measure.vars)
{
data<-data[,c(id.vars,measure.vars)]
data<-melt(data, id.vars=id.vars, measure.vars=measure.vars,  variable.name="Variable.Region")
data<-cbind(data,colsplit(data$Variable.Region,("_"),c("Variable","Region")))
data$Variable.Region<-NULL
new.form<-as.formula(paste(paste(id.vars,collapse="+"),"Region~Variable",sep="+"))
data<-dcast(data,new.form, value.var="value")
data$Region<-ifelse(data$Region=="N","Advanced Region","Emerging Region")
return(data)
}
#Plot Temperature Anomaly Growth
#Create plot with aesthetics
p1<-ggplot(out, aes(time,Delta.Temp))+geom_line(size=1)
#Plot
p1+geom_hline(yintercept = 2.0,linetype = 2)+geom_hline(yintercept = 6.0,linetype = 2)+
ggtitle("Global Temperature Anomaly With Respect to Historic Mean")+
scale_x_continuous(name="Time [Years]", breaks=seq(0,300,by=50)) +
scale_y_continuous(name="Degrees Celsius",limits=c(0, 6.0))
#Create plot with differences in growth rates
#Create plot with aesthetics
p2<-ggplot(data.by.region(out,"time",c("Growth.Rate_N","Growth.Rate_S")), aes(time,Growth.Rate,colour =Region))
p2+geom_line(size=1)+ggtitle("Anual Growth Rate")+
scale_x_continuous(name="Time [Years]", breaks=seq(0,500,by=50)) +
scale_y_continuous(name="%/year")
#Create plot with your policy
#Policy Vectors
#Carbon Tax
p3<-ggplot(data.by.region(out,"time",c("ce.tax_N","ce.tax_S")), aes(time,ce.tax,colour =Region))
p3+ geom_line()+geom_line(size=1)+
ggtitle("Carbon Tax")+
scale_x_continuous(name="Time [Years]", breaks=seq(0,300,by=50)) +
scale_y_continuous(name="Percent Markup",limits=c(0, 1.0))
#Tech Subsidy
p4<-ggplot(data.by.region(out,"time",c("Tec.subsidy_N","Tec.subsidy_S")), aes(time,Tec.subsidy,colour =Region))
p4+ geom_line()+geom_line(size=1)+
ggtitle("Technology subsidy")+
scale_x_continuous(name="Time [Years]", breaks=seq(0,300,by=50)) +
scale_y_continuous(name="Percent Markup",limits=c(0, 1.0))
#R&D Subsidy
p5<-ggplot(data.by.region(out,"time",c("RD.subsidy_N","RD.subsidy_S")), aes(time,RD.subsidy,colour =Region))
p5 + geom_line()+geom_line(size=1)+
ggtitle("R&D Subsidy")+
scale_x_continuous(name="Time [Years]", breaks=seq(0,300,by=50)) +
scale_y_continuous(name="Percent Markup",limits=c(0,3.0))
####
#Run an experiment with isocastic variation
#
#Create an experiment table
sample.size<-100
#Experimental.design
set.seed(55555)
Exp.design<-data.frame(Run.ID=1:sample.size,
CO2.Concentration.0 = 382.2461,
TimeStep = as.numeric(5),#
EndTime = as.numeric(300), #
alfa = 0.33,
epsilon = 5.0, #elasticity of subsitution
Gamma.re = rnorm(sample.size,0.25,0.1), #R&D returns SETs
k.re = as.numeric(0.0),#
Gamma.ce = rnorm(sample.size,0.25,0.1), #R&D returns FETs
k.ce = as.numeric(0.0),#
Eta.re = 0.02, #Innovation propensity SETs
Eta.ce = 0.02, #Innovation propensity FETs
Nu.re = 0.02,  #Transferability SETs
Nu.ce = 0.02,  #Transferability FETs
qsi = as.numeric(0.0100539),#
Delta.S = 0.001822767,
Delta.Temp.Disaster = as.numeric(6.0),#
Beta.Delta.Temp = 5.0,
CO2.base = 289.415,
labor.growth_N = as.numeric(0),# Population growth Advanced Region
labor.growth_S = as.numeric(0),# Population growth Emerging Region
lambda.S = 0.1443,
sigma.utility = 2.0,
rho = 0.008, #Discount rate
Yre.0_N = 45.55,
Yce.0_N = 193.2,
Yre.0_S = 27.82,
Yce.0_S = 257.54,
size.factor = as.numeric(4.0)#
)
#run the experiment
exp.out<-apply(Exp.design,1,function(x){
#load parameters from Ex.design.table
params<-c( CO2.Concentration.0 = as.numeric(x["CO2.Concentration.0"]), #
TimeStep = as.numeric(x["TimeStep"]),#
EndTime = as.numeric(x["EndTime"]), #
alfa = as.numeric(x["alfa"]),
epsilon = as.numeric(x["epsilon"]), #elasticity of subsitution
Gamma.re = as.numeric(x["Gamma.re"]), #R&D returns SETs
k.re = as.numeric(x["k.re"]),#
Gamma.ce = as.numeric(x["Gamma.ce"]), #R&D returns FETs
k.ce = as.numeric(x["k.ce"]),#
Eta.re = as.numeric(x["Eta.re"]), #Innovation propensity SETs
Eta.ce = as.numeric(x["Eta.ce"]), #Innovation propensity FETs
Nu.re = as.numeric(x["Nu.re"]),  #Transferability SETs
Nu.ce = as.numeric(x["Nu.ce"]),  #Transferability FETs
qsi = as.numeric(x["qsi"]),#
Delta.S = as.numeric(x["Delta.S"]),
Delta.Temp.Disaster = as.numeric(x["Delta.Temp.Disaster"]),#
Beta.Delta.Temp = as.numeric(x["Beta.Delta.Temp"]),
CO2.base = as.numeric(x["CO2.base"]),
labor.growth_N = as.numeric(x["labor.growth_N"]),# Population growth Advanced Region
labor.growth_S = as.numeric(x["labor.growth_S"]),# Population growth Emerging Region
lambda.S = as.numeric(x["lambda.S"]),
sigma.utility = as.numeric(x["sigma.utility"]),
rho = as.numeric(x["rho"]), #Discount rate
Yre.0_N = as.numeric(x["Yre.0_N"]),
Yce.0_N = as.numeric(x["Yce.0_N"]),
Yre.0_S = as.numeric(x["Yre.0_S"]),
Yce.0_S = as.numeric(x["Yce.0_S"]),
size.factor = as.numeric(x["size.factor"]),#
Run.ID = as.numeric(x["Run.ID"]));
#run the model
ediam(policies,params)
})
#Transform results into a data frame
exp.out<-do.call("rbind",exp.out)
#Process temperature anomoaly results
#histogram
ggplot(data=exp.out[exp.out$time==300,], aes(Delta.Temp))+ geom_histogram(binwidth = 1,aes(y = ..density..)) + geom_density()
#mean
mean(exp.out$Delta.Temp[exp.out$time==300])
#variance
var(exp.out$Delta.Temp[exp.out$time==300])
#confidence interval
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300],conf.level = 0.99)$conf.int)
#Process averge growth rate
#histogram
#advanced region
ggplot(data=exp.out[exp.out$time==300,], aes(Growth.Rate_N))+ geom_histogram(binwidth = 1,aes(y = ..density..)) + geom_density()
#emerging region
ggplot(data=exp.out[exp.out$time==300,], aes(Growth.Rate_S))+ geom_histogram(binwidth = 1,aes(y = ..density..)) + geom_density()
#confidence interval
#advanced region
as.numeric(t.test(exp.out$Growth.Rate_N[exp.out$time==300],conf.level = 0.99)$conf.int)
#emerging region
as.numeric(t.test(exp.out$Growth.Rate_S[exp.out$time==300],conf.level = 0.99)$conf.int)
mean.growth<-aggregate(exp.out[,c("Growth.Rate_N","Growth.Rate_S")],list(Run.ID=exp.out$Run.ID),mean,na.rm=TRUE)
#histograms
#advanced region
p1<-ggplot(data=mean.growth, aes(Growth.Rate_N*100))+ geom_histogram(binwidth=0.5)+scale_y_continuous(limits=c(0, 50))
#emerging region
p2<-ggplot(data=mean.growth, aes(Growth.Rate_S*100))+ geom_histogram(binwidth=0.5)+scale_y_continuous(limits=c(0, 50))
#plot panel
library(gridExtra)
grid.arrange(p1,p2,ncol=2)
#means
#advanced region
mean(mean.growth$Growth.Rate_N*100)
#emerging region
mean(mean.growth$Growth.Rate_S*100)
#variance
#advanced region
var(mean.growth$Growth.Rate_N*100)
#emerging region
var(mean.growth$Growth.Rate_S*100)
#confidence interval
as.numeric(t.test(mean.growth$Growth.Rate_N*100)$conf.int)
as.numeric(t.test(mean.growth$Growth.Rate_S*100)$conf.int)
#Repeat the experiment 10 times
#Create a funcion the runs the experiment
ediam.monte.carlo<-function(sample.size,policies){
Exp.design<-data.frame(Run.ID=1:sample.size,
CO2.Concentration.0 = 382.2461,
TimeStep = as.numeric(5),#
EndTime = as.numeric(300), #
alfa = 0.33,
epsilon = 5.0,
Gamma.re = rnorm(sample.size,0.25,0.1),
k.re = as.numeric(0.0),#
Gamma.ce = rnorm(sample.size,0.25,0.1),
k.ce = as.numeric(0.0),#
Eta.re = 0.02, #Innovation propensity SETs
Eta.ce = 0.02, #Innovation propensity FETs
Nu.re = 0.02,  #Transferability SETs
Nu.ce = 0.02,  #Transferability FETs
qsi = as.numeric(0.0100539),#
Delta.S = 0.001822767,
Delta.Temp.Disaster = as.numeric(6.0),#
Beta.Delta.Temp = 5.0,
CO2.base = 289.415,
labor.growth_N = as.numeric(0),
labor.growth_S = as.numeric(0),
lambda.S = 0.1443,
sigma.utility = 2.0,
rho = 0.008, #Discount rate
Yre.0_N = 45.55,
Yce.0_N = 193.2,
Yre.0_S = 27.82,
Yce.0_S = 257.54,
size.factor = as.numeric(4.0)#
)
#run the experiment
exp.out<-apply(Exp.design,1,
function(x){
#load parameters from Ex.design.table
params<-c( CO2.Concentration.0 = as.numeric(x["CO2.Concentration.0"]), #
TimeStep = as.numeric(x["TimeStep"]),#
EndTime = as.numeric(x["EndTime"]), #
alfa = as.numeric(x["alfa"]),
epsilon = as.numeric(x["epsilon"]), #elasticity of subsitution
Gamma.re = as.numeric(x["Gamma.re"]), #R&D returns SETs
k.re = as.numeric(x["k.re"]),#
Gamma.ce = as.numeric(x["Gamma.ce"]), #R&D returns FETs
k.ce = as.numeric(x["k.ce"]),#
Eta.re = as.numeric(x["Eta.re"]), #Innovation propensity SETs
Eta.ce = as.numeric(x["Eta.ce"]), #Innovation propensity FETs
Nu.re = as.numeric(x["Nu.re"]),  #Transferability SETs
Nu.ce = as.numeric(x["Nu.ce"]),  #Transferability FETs
qsi = as.numeric(x["qsi"]),#
Delta.S = as.numeric(x["Delta.S"]),
Delta.Temp.Disaster = as.numeric(x["Delta.Temp.Disaster"]),#
Beta.Delta.Temp = as.numeric(x["Beta.Delta.Temp"]),
CO2.base = as.numeric(x["CO2.base"]),
labor.growth_N = as.numeric(x["labor.growth_N"]),# Population growth Advanced Region
labor.growth_S = as.numeric(x["labor.growth_S"]),# Population growth Emerging Region
lambda.S = as.numeric(x["lambda.S"]),
sigma.utility = as.numeric(x["sigma.utility"]),
rho = as.numeric(x["rho"]), #Discount rate
Yre.0_N = as.numeric(x["Yre.0_N"]),
Yce.0_N = as.numeric(x["Yce.0_N"]),
Yre.0_S = as.numeric(x["Yre.0_S"]),
Yce.0_S = as.numeric(x["Yce.0_S"]),
size.factor = as.numeric(x["size.factor"]),#
Run.ID = as.numeric(x["Run.ID"]));
#run the model
ediam(policies,params)
})
#Transform results into a data frame
exp.out<-do.call("rbind",exp.out)
#return experiment results
return(exp.out)
}
#Run repated experiments and calculate confidence interval
set.seed(55555)
sample.size<-1000
#trial 1
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300],conf.level = 0.99)$conf.int)
#trial 2
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#trial 3
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#trial 4
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#trial 5
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#trial 6
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#trial 7
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#trial 8
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#trial 9
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#trial 10
exp.out<-ediam.monte.carlo(sample.size,policies)
as.numeric(t.test(exp.out$Delta.Temp[exp.out$time==300])$conf.int)
#Plot Temperature Anomaly Growth
#estimate confidence interval at each time step
ci.time.step <- summarySE(exp.out, measurevar="Delta.Temp", groupvars=c("time"),na.rm=TRUE)
colnames(ci.time.step)<-c("time","N","Delta.Temp.Mean","sd","se","ci")
#merge with output data
dim(exp.out)
dim(ci.time.step)
exp.out<-merge(exp.out,ci.time.step,by="time")
exp.out<-exp.out[order(exp.out$Run.ID),]
dim(exp.out)
p1<-ggplot(exp.out, aes(time,Delta.Temp,group=Run.ID))
p1+geom_line(linetype = 2,alpha=0.15)+
geom_ribbon(aes(ymin = Delta.Temp.Mean - ci, ymax = Delta.Temp.Mean + ci),fill="grey",alpha=0.02)+
geom_line(aes(y = Delta.Temp.Mean),size=1.0)+
ggtitle("Global Temperature Anomaly With Respect to Historic Mean")+
scale_x_continuous(name="Time [Years]", breaks=seq(0,300,by=50)) +
scale_y_continuous(name="Degrees Celsius",limits=c(0, 6.0))
#plot Growth variables
p2<-ggplot(data.by.region(exp.out,c("Run.ID","time"),c("Growth.Rate_N","Growth.Rate_S")), aes(time,Growth.Rate,colour=Region,group=paste(Run.ID,Region)))
p2+geom_line()+ggtitle("Anual Growth Rate")+
scale_x_continuous(name="Time [Years]", breaks=seq(0,300,by=50)) +
scale_y_continuous(name="%/year")
