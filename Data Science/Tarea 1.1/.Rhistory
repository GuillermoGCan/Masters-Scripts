jqr = jqr + 1
counter = 0
} else {
njqr = njqr + 1
counter = 0
}
} else if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[3])){
if (sum(numero_vec[1],numero_vec[2],numero_vec[3]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[4])){
if (sum(numero_vec[1],numero_vec[2],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[1] == palos_vec[3]) & (palos_vec[1] == palos_vec[4])){
if (sum(numero_vec[1],numero_vec[3],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[2] == palos_vec[3]) & (palos_vec[2] == palos_vec[4])){
if (sum(numero_vec[2],numero_vec[3],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else {
njqr = njqr + 1
}
}
prob_jqr <- jqr/(jqr + njqr)
l <- is.numeric(0)
jqr <- is.numeric(0)
njqr <- is.numeric(0)
counter <- is.numeric(0)
for (l in 1 : 100000){
baraja_revuelta <- sample(baraja) # aquí revuelvo mi baraja
cuatroCartas <- alAzar(baraja_revuelta,4)
cuatroCartas_list <- strsplit(cuatroCartas, "-")
cuatroCartas_vec <- unlist(cuatroCartas_list)
numero_vec <- as.numeric(c(cuatroCartas_vec [1], cuatroCartas_vec [3],
cuatroCartas_vec [5], cuatroCartas_vec [7]))
palos_vec <- as.character(c(cuatroCartas_vec [2], cuatroCartas_vec [4],
cuatroCartas_vec [6], cuatroCartas_vec [8]))
if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[3]) & (palos_vec[1] == palos_vec[4])){
for (m in numero_vec){
if(m > 10){
counter = counter + 1
}
}
if (counter == 3){
jqr = jqr + 1
counter = 0
} else {
njqr = njqr + 1
counter = 0
}
} else if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[3])){
if (sum(numero_vec[1],numero_vec[2],numero_vec[3]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[4])){
if (sum(numero_vec[1],numero_vec[2],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[1] == palos_vec[3]) & (palos_vec[1] == palos_vec[4])){
if (sum(numero_vec[1],numero_vec[3],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[2] == palos_vec[3]) & (palos_vec[2] == palos_vec[4])){
if (sum(numero_vec[2],numero_vec[3],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else {
njqr = njqr + 1
}
}
l <- is.numeric(0)
jqr <- is.numeric(0)
njqr <- is.numeric(0)
counter <- is.numeric(0)
for (l in 1 : 10000){
baraja_revuelta <- sample(baraja) # aquí revuelvo mi baraja
cuatroCartas <- alAzar(baraja_revuelta,4)
cuatroCartas_list <- strsplit(cuatroCartas, "-")
cuatroCartas_vec <- unlist(cuatroCartas_list)
numero_vec <- as.numeric(c(cuatroCartas_vec [1], cuatroCartas_vec [3],
cuatroCartas_vec [5], cuatroCartas_vec [7]))
palos_vec <- as.character(c(cuatroCartas_vec [2], cuatroCartas_vec [4],
cuatroCartas_vec [6], cuatroCartas_vec [8]))
if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[3]) & (palos_vec[1] == palos_vec[4])){
for (m in numero_vec){
if(m > 10){
counter = counter + 1
}
}
if (counter == 3){
jqr = jqr + 1
counter = 0
} else {
njqr = njqr + 1
counter = 0
}
} else if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[3])){
if (sum(numero_vec[1],numero_vec[2],numero_vec[3]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[4])){
if (sum(numero_vec[1],numero_vec[2],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[1] == palos_vec[3]) & (palos_vec[1] == palos_vec[4])){
if (sum(numero_vec[1],numero_vec[3],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[2] == palos_vec[3]) & (palos_vec[2] == palos_vec[4])){
if (sum(numero_vec[2],numero_vec[3],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else {
njqr = njqr + 1
}
}
prob_jqr <- jqr/(jqr + njqr)
se_encuentran <- is.numeric(0)
no_se_encuentran <- is.numeric(0)
counter <- is.numeric(0)
for (romeo in 0:59){
for (julieta in 0:59){
if (abs(romeo-julieta) <= 15){
se_encuentran = se_encuentran + 1
}
else {
no_se_encuentran = no_se_encuentran + 1
}
counter = counter + 1
}
}
prob_se_encuentran = se_encuentran/(se_encuentran + no_se_encuentran)
for (i in num ){
for (j in palos ){
card <- ( paste (i, j, sep ="-"))
baraja <- c( baraja , card )
}
}
num <- c(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13)
palos <- c(" trebol "," espadas "," corazones "," picas ")
baraja <- c()
for (i in num ){
for (j in palos ){
card <- ( paste (i, j, sep ="-"))
baraja <- c( baraja , card )
}
}
alAzar <- function(input_baraja,input_numero_cartas){
carta = sample(input_baraja,input_numero_cartas)
return(carta)
}
alAzar(baraja,1)
prob_analitica <- 1/52 #probabilidad analítica de sacar un as de espadas
as_espadas <- is.numeric(0)
no_as_espadas <- is.numeric(0)
k <- is.numeric(0)
# Inicio ciclo de sacar 10,000 cartas al azar.
for (k in 1 : 10000){
carta = alAzar(baraja,1)
if(carta == "1- espadas "){
as_espadas = as_espadas + 1
}
else{
no_as_espadas = no_as_espadas + 1
}
}
# Cálculo empírico de probabilidad de sacar un as de espadas con 10,000 experimentos
prob_as_espadas <- as_espadas/(as_espadas + no_as_espadas)
# Declaro mis variables iniciales
as_espadas <- is.numeric(0)
no_as_espadas <- is.numeric(0)
k <- is.numeric(0)
# Inicio ciclo de sacar 10,000 cartas al azar.
for (k in 1 : 10000){
carta = alAzar(baraja,1)
if(carta == "1- espadas "){
as_espadas = as_espadas + 1
}
else{
no_as_espadas = no_as_espadas + 1
}
}
# Cálculo empírico de probabilidad de sacar un as de espadas con 10,000 experimentos
prob_as_espadas <- as_espadas/(as_espadas + no_as_espadas)
l <- is.numeric(0)
jqr <- is.numeric(0)
njqr <- is.numeric(0)
counter <- is.numeric(0)
for (l in 1 : 10000){
baraja_revuelta <- sample(baraja) # aquí revuelvo mi baraja
cuatroCartas <- alAzar(baraja_revuelta,4)
cuatroCartas_list <- strsplit(cuatroCartas, "-")
cuatroCartas_vec <- unlist(cuatroCartas_list)
numero_vec <- as.numeric(c(cuatroCartas_vec [1], cuatroCartas_vec [3],
cuatroCartas_vec [5], cuatroCartas_vec [7]))
palos_vec <- as.character(c(cuatroCartas_vec [2], cuatroCartas_vec [4],
cuatroCartas_vec [6], cuatroCartas_vec [8]))
if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[3]) & (palos_vec[1] == palos_vec[4])){
for (m in numero_vec){
if(m > 10){
counter = counter + 1
}
}
if (counter == 3){
jqr = jqr + 1
counter = 0
} else {
njqr = njqr + 1
counter = 0
}
} else if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[3])){
if (sum(numero_vec[1],numero_vec[2],numero_vec[3]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[1] == palos_vec[2]) & (palos_vec[1] == palos_vec[4])){
if (sum(numero_vec[1],numero_vec[2],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[1] == palos_vec[3]) & (palos_vec[1] == palos_vec[4])){
if (sum(numero_vec[1],numero_vec[3],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else if ((palos_vec[2] == palos_vec[3]) & (palos_vec[2] == palos_vec[4])){
if (sum(numero_vec[2],numero_vec[3],numero_vec[4]) == 36){
jqr = jqr + 1
} else {
njqr = njqr + 1
}
} else {
njqr = njqr + 1
}
}
prob_jqr <- jqr/(jqr + njqr)
prob_jqr
library(reshape2) # esta es para modificar mi base de datos
library(tm)
library(wordcloud)
library(RColorBrewer)
reading = "tarea1_1.txt"
modi <- Corpus (VectorSource(modi_txt))
modi_txt = readLines(reading)
reading = "tarea1_1.txt"
modi_txt = readLines(reading)
rm(list=ls())
library(reshape2) # esta es para modificar mi base de datos
library(tm)
library(wordcloud)
library(RColorBrewer)
reading = "tarea1_1.txt"
modi_txt = readLines(reading)
rm(list=ls())
library(reshape2) # esta es para modificar mi base de datos
library(tm)
library(wordcloud)
library(RColorBrewer)
reading = "tarea1_1.txt"
modi_txt = readLines(reading)
modi <- Corpus (VectorSource(modi_txt))
View(modi)
View(modi)
?corpus
?VectorSource
modi_data <- tm_map(modi, stripWhitespace)
View(modi_data)
View(modi_data)
View(modi)
View(modi)
?tm_map
rm(list=ls())
reading = "tarea1_1.txt"
?readLines
modi_txt = readLines(reading)
modi_txt
modi <- Corpus (VectorSource(modi_txt))
View(modi)
View(modi)
modi
modi
modi
View(modi)
modi_data <- tm_map(modi, stripWhitespace)
modi_data <- tm_map(modi, stripWhitespace)
modi_data <- tm_map(modi_data, removePunctuation)
View(modi)
modi <- Corpus (VectorSource(modi_txt))
modi_data <- tm_map(modi_data, removePunctuation)
modi_data <- tm_map(modi_data, removePunctuation)
modi_data <- tm_map(modi, stripWhitespace)
modi_data <- tm_map(modi, stripWhitespace)
modi_data <- tm_map(modi_data, removePunctuation)
View(modi)
View(modi)
View(modi)
modi
View(modi)
modi <- unlist(modi_data)
modi
?unlist
remove(reading)
detach("package:RColorBrewer", unload = TRUE)
library(RColorBrewer)
texto = "tarea1_1.txt"
vec_texto = readLines(reading)
vec_texto = readLines(reading)
vec_texto = readLines(texto)
lista_texto <- Corpus (VectorSource(vec_texto))
lista_texto <- tm_map(lista_texto, stripWhitespace)
lista_texto <- tm_map(lista_texto, removePunctuation)
vec2_texto <- unlist(lista_texto)
vec2_texto
vec_texto
strsplit(vec2_texto," ")
?tm_map
vec_palabras <- strsplit(vec2_texto," ")
vec2_palabras <- tm_map(vec_palabras, removeWords, stopwords("spanish"))
vec_preposiciones <- c("a", "ante", "bajo", "cabe", "con", "contra", "de", "desde", "durante", "en", "entre", "hacia", "hasta", "mediante", "para", "por", "según", "sin", "so", "sobre", "tras", "versus", "vía")
lista_texto <- tm_map(lista_texto, tolower)
vec2_texto <- unlist(lista_texto)
vec_palabras <- strsplit(vec2_texto," ")
vec_palabras
remove(vec_palabras)
vec_palabras <- unlist(list_palabras)
list_palabras <- strsplit(vec2_texto," ")
vec_palabras <- unlist(list_palabras)
vec_palabras
vec_preposicionesyarticulos <- c("a", "ante", "bajo", "cabe", "con", "contra", "de",
"desde", "durante", "en", "entre", "hacia", "hasta",
"mediante", "para", "por", "según", "sin", "so", "sobre",
"tras", "versus", "vía", "el", "la", "los", "las", "uno",
"una", "unos", "unas")
remove(vec_preposiciones)
i <- is.numeric(0)
k <- c("el", "la")
match("la",k)
posi <- match("la",k)
posi
k <- k(-posi)
k <- k[-posi]
k
remove(k, posi)
posi
for (i in vec_palabras){
for (j in vec_preposicionesyarticulos){
if ( i == j){
pos <- match(i,vec_palabras)
vec_palabras <- vec_palabras[-pos]
}
}
}
vec_palabras
rm(list=ls())
texto = "tarea1_1.txt"
vec_texto = readLines(texto)
lista_texto <- Corpus (VectorSource(vec_texto))
lista_texto <- tm_map(lista_texto, stripWhitespace)
lista_texto <- tm_map(lista_texto, removePunctuation)
lista_texto <- tm_map(lista_texto, tolower)
vec2_texto <- unlist(lista_texto)
list_palabras <- strsplit(vec2_texto," ")
vec_palabras <- unlist(list_palabras)
vec_preposicionesyarticulos <- c("a", "ante", "bajo", "cabe", "con", "contra", "de",
"desde", "durante", "en", "entre", "hacia", "hasta",
"mediante", "para", "por", "según", "sin", "so", "sobre",
"tras", "versus", "vía", "el", "la", "los", "las", "uno",
"una", "unos", "unas", "del")
i <- is.character("")
j <- is.character("")
for (i in vec_palabras){
for (j in vec_preposicionesyarticulos){
if ( i == j){
pos <- match(i,vec_palabras)
vec_palabras <- vec_palabras[-pos]
}
}
}
vec_palabras_nuevo <- vec_palabras
vec_palabras <- unlist(list_palabras)
?str_detect
str_detect(vec_palabras_nuevo,^a)
str_detect(vec_palabras_nuevo,"^a")
str_detect(vec_preposicionesyarticulos, "^a")
?substring
substring(vec_palabras_nuevo,2,2)
vec_palabras_nuevo
chars(vec_palabras_nuevo)
nchar(vec_palabras_nuevo)
vocales <- c("a", "e", "i", "o", "u")
consonantes <- c("b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p",
"q", "r", "s", "t", "v", "w", "x", "y", "z", "ñ")
caracteres_vec <- nchars(vec_palabras_nuevo)
caracteres_vec <- nchar(vec_palabras_nuevo)
vec_voccon <- is.vector()
vec_voccon <- is.vector(0)
vec_vocon[1] = 1
vec_voccon
vec_vocon[1]
remove(vec_voccon)
vec_vocon[1]=1
vec_voccon <- asas.vector()
vec_voccon <- as.vector()
vec_voccon <- as.vector(0)
vec_vocon[1] = 1
vec_voccon[1]
vec_voccon[1]=1
vec_voccon[2]=1
remove(vec_voccon)
vec_voccon <- is.vector(0)
vec_voccon[1]=1
vec_voccon[2]=1
remove(vec_voccon)
k <- is.character("")
v <- is.character("")
c <- is.character("")
l <- is.numeric(0)
nvoccon <- is.numeric(0)
nvocvoc <- is.numeric(0)
notras <- is.numeric(0)
vec_voccon <- is.vector(0)
vec_vocvoc <- as.vector(0)
vec_otras <- as.vector(0)
for (k in vec_palabras_nuevo){
for(l in caracteres_vec){
for(v in vocales){
if (substring(k,1,1) == v){
for (c in consonantes){
if (substring(k,l,l) == c){
nvoccon = nvoccon + 1
vec_voccon [nvoccon] = k
} else {
nvocvoc = nvocvoc + 1
vec_vocvoc [nvocvoc] = k
}
}
} else {
notras = notras + 1
vec_otras [notras] = k
}
}
}
}
lista_final <- list(vec_voccon, vec_vocvoc, vec_otras)
View(lista_final)
View(lista_final)
?match
?index
unique(vec_palabras_nuevo)
vocales <- c("a", "e", "i", "o", "u")
consonantes <- c("b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p",
"q", "r", "s", "t", "v", "w", "x", "y", "z", "ñ")
caracteres_vec <- nchar(vec_palabras_nuevo)
k <- is.numeric(0)
v <- is.character("")
c <- is.character("")
nvoccon <- is.numeric(0)
nvocvoc <- is.numeric(0)
notras <- is.numeric(0)
vec_voccon <- is.vector(0)
vec_vocvoc <- as.vector(0)
vec_otras <- as.vector(0)
for (k in 1:81){
for(v in vocales){
if (substring(vec_palabras_nuevo[k],1,1) == v){
for (c in consonantes){
if (substring(vec_palabras_nuevo[k],caracteres_vec[k],caracteres_vec[k]) == c){
nvoccon = nvoccon + 1
vec_voccon [nvoccon] = vec_palabras_nuevo[k]
} else {
nvocvoc = nvocvoc + 1
vec_vocvoc [nvocvoc] = vec_palabras_nuevo[k]
}
}
} else {
notras = notras + 1
vec_otras [notras] = vec_palabras_nuevo[k]
}
}
}
?while
?while
