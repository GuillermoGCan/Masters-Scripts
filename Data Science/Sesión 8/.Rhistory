df <- read.csv("USArrests", row.names = 1)
install.packages("cluster")
df <- read.csv("USArrests", row.names = 1)
library(readr)
df <- read_csv("C:/Users/Guillermo GC/Dropbox/TEC MTY MPE/2do Trimestre/Ciencia de datos/Sesión 8/USArrests.csv")
# Estandarizar o reescalar mis valores
df <- scale(df)
df <- read_csv("C:/Users/Guillermo GC/Dropbox/TEC MTY MPE/2do Trimestre/Ciencia de datos/Sesión 8/USArrests.csv", row.names=1)
View(df)
df <- read.csv("C:/Users/Guillermo GC/Dropbox/TEC MTY MPE/2do Trimestre/Ciencia de datos/Sesión 8/USArrests.csv", row.names=1)
View(df)
# Estandarizar o reescalar mis valores
df <- scale(df)
distance <- get_dist(df)
distance <- get.dist(df)
# Estandarizar o reescalar mis valores
df <- scale(df)
View(df)
?get_dist
??get_dist
#install.packages("cluster")
library(cluster)
distance <- get_dist(df)
library(factoextra)
distance <- get_dist(df)
install.packages("qgraph")
install.packages("FactoMineR")
install.packages("FactoExtra")
library(sf) # más común para hacer análisis espacial en R
library(rgdal)
library(ggplot2)
library(qgraph)
library(FactoMineR)
library(factoextra)
library(corrplot)
agebs <- readOGR(dsn=".",layer = "agebs_zm",stringsAsFactors = FALSE)
plot(agebs)
table(agebs$GRADO_MARG)
# observemos los datos
ggplot(agebs@data, aes(x=VIV33_R, y=VIV36_R)) +
geom_point() +
ggtitle("% Computadoras vs. % Internet por AGEB/MTY, Censo INEGI 2010")
cor(agebs@data$VIV33_R, y= agebs@data$VIV36_R)
vars <- c("CVEGEO", "GRADO_MARG", "ECO22_R", "ECO25_R", "VIV5_R", "VIV9_R",
"VIV27_R", "VIV28_R", "VIV32_R", "VIV33_R", "VIV35_R", "VIV36_R")
agebs2 <- agebs[agebs@data$VIV27_R >= 0 & agebs@data$ECO22_R >= 0 & agebs@data$VIV32_R >= 0, ]
sel_data <- agebs2[, vars]
sel_data@data[sel_data@data < 0] <- NA
sel_data <- sel_data[complete.cases(sel_data@data),]
## Matriz de correlaciones
cor(sel_data@data[3:ncol(sel_data)],) #selecciona de columna 3 en delante porque 1 es clave del AGEB
qgraph(cor(sel_data@data[3:ncol(sel_data)],)) #despliega plot de asociación en variables de base de datos
# Calcular el PCA
ir.pca <- prcomp(sel_data@data[3:ncol(sel_data)], center= TRUE, scale = TRUE)
print(ir.pca)
summary(ir.pca)
plot(ir.pca, type="l") #plot de explicación de la varianza por PCA
d <- as.data.frame(predict(ir.pca, sel_data@data[]))
head(d)
dim(d)
# Exploremos los resultados por componente
var <- get_pca_var(ir.pca)
corrplot(var$cos2, is.corr=FALSE)
# llevo mi índice a las agebs
sel_data$PC1 <- d$PC1
#### Mapa ####
#install.packages("cartography") Librería para mapas fijos.
#library(cartography)
choroLayer(spdf = sel_data, df=sel_data@data, var="PC1")
install.packages("leaflet") # Librería para mapas interactivos.
library(leaflet)
mi.paleta <- colorQuantile(palette = "magma", domain = sel_data@data$PC1,
na.color = "transparent")
# Exploración de variable a plotear
plot(density(sel_data@data$PC1))
# Un mapa sencillo
mapa_lf <- leaflet(sel_data) %>%
addTiles() %>% # los cuadros de la imagen de fondo que quiero (Google Maps, Street Maps, etc)
setView(lat =25.6707731 , lng=-100.309228, zoom=12) %>%
addPolygons(
stroke = TRUE,
weight = 0.3, # modifica lineas azules que dividen polígonos
fillOpacity = 0.60, # Opacidad 0 es transparente, 1 es opaco total.
fillColor = ~colorQuantile("magma", PC1)(PC1)
) %>%
addProviderTiles("CartoDB.Positron", options=providerTileOptions(opacity=1))
mapa_lf
# Un mapa con tooltips
install.packages("htmltools")
library(htmltools)
etiquetasMTY <- paste(
"AGEB: ", sel_data@data$CVEGEO, "<br/>",
"Indicador Ingreso: ", round(sel_data@data$PC1,2),
sep="") %>%
lapply(htmltools::HTML)
mapa_lf2 <- leaflet(sel_data) %>%
addTiles() %>% # los cuadros de la imagen de fondo que quiero (Google Maps, Street Maps, etc)
setView(lat =25.6707731 , lng=-100.309228, zoom=12) %>%
addPolygons(
stroke = TRUE,
weight = 0.3, # modifica lineas azules que dividen polígonos
fillOpacity = 0.65, # Opacidad 0 es transparente, 1 es opaco total.
label = etiquetasMTY,
labelOptions = labelOptions(
style=list("font-weight" = "normal", padding= "4px px"),
textsize= "11px",
direction="auto"
),
fillColor = ~mi.paleta(PC1)
) %>%
addProviderTiles("Stamen.Toner", options=providerTileOptions(opacity=1)) %>%
addLegend(
pal= mi.paleta,
values= ~PC1,
opacity = 0.65,
title="Indicador de ingreso",
position = "bottomleft",
labFormat = function(type, cuts, p){
paste0(c("Bajo", "Medio", "Alto", "Muy alto"))
}
)
mapa_lf2
library(htmlwidgets)
install.packages("htmltools")
htmlwidgets::saveWidget(mapa_lf2, file="mapaClaseCD.html")
install.packages("htmltools")
htmlwidgets::saveWidget(mapa_lf2, file="mapaClaseCD.html")
mapa_lf2 <- leaflet(sel_data) %>%
addTiles() %>% # los cuadros de la imagen de fondo que quiero (Google Maps, Street Maps, etc)
setView(lat =25.6707731 , lng=-100.309228, zoom=12) %>%
addPolygons(
stroke = TRUE,
weight = 0.3, # modifica lineas azules que dividen polígonos
fillOpacity = 0.65, # Opacidad 0 es transparente, 1 es opaco total.
label = etiquetasMTY,
labelOptions = labelOptions(
style=list("font-weight" = "normal", padding= "4px px"),
textsize= "11px",
direction="auto"
),
fillColor = ~mi.paleta(PC1)
) %>%
addProviderTiles("Stamen.Toner", options=providerTileOptions(opacity=1)) %>%
addLegend(
pal= mi.paleta,
values= ~PC1,
opacity = 0.65,
title="Indicador de ingreso",
position = "bottomleft",
labFormat = function(type, cuts, p){
paste0(c("Bajo", "Medio", "Alto", "Muy alto"))
}
)
library(sf) # más común para hacer análisis espacial en R
library(rgdal)
library(ggplot2)
library(qgraph)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(tidyverse)
agebs <- readOGR(dsn=".",layer = "agebs_zm",stringsAsFactors = FALSE)
