tree.covid <- tree(DEFUNCION~., d6_train)
remove(tree.covid)
d6_train <- d2_train
d6_test <- d2_test
## Convierto mi variable dependiente en factor para obtener un árbol de clasificación
d6_train$DEFUNCION <- ifelse(d6_train$DEFUNCION == 1, "Si", "No")
d6_train$DEFUNCION <- as.factor(d6_train$DEFUNCION)
d6_test$DEFUNCION <- ifelse(d6_test$DEFUNCION == 1, "Si", "No")
d6_test$DEFUNCION <- as.factor(d6_test$DEFUNCION)
tree.covid <- tree(DEFUNCION~., d6_train)
plot(tree.covid)
text(tree.covid, pretty = 0)
# Uso el modelo para predecir sobre la base de prueba
tree.covid.test <- predict(tree.covid, d6_test, type = "class")
summary(tree.covid.test)
table(tree.covid.test, d6_test$DEFUNCION)
summary(tree.covid)
?randomforest
?randomForest
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 11,
sampsize = 0.67*nrow(d6_train))
bag.covid_6
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 11,
sampsize = 0.67*nrow(d6_train))
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 10,
sampsize = 0.67*nrow(d6_train))
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 10,
sampsize = round(0.67*nrow(d6_train),0))
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 10,
sampsize = 22988)
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 11,
sampsize = 22988)
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 10,
sampsize = 22988)
rf.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 7,
sampsize = 22988)
summary(bag.covid_6)
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 50,
mtry = 10,
sampsize = 22988)
rf.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 50,
mtry = 7,
sampsize = 22988)
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 50,
mtry = 10,
sampsize = 22988)
### ntree: número de árboles
### mtry : número de variables a considerar. Si se utilizan todas las variables disponibles
###   se considera un bagging.
### sampsize: tamaño de la muestra que toma
### Uso el modelo para predecir sobre la base de prueba
bag.covid.test <- predict(bag.covid_6,
d6_test,
type = "class")
## Random Forest
rf.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 50,
mtry = 7,
sampsize = 22988)
### Uso el modelo para predecir sobre la base de prueba
rf.covid.test <- predict(rf.covid_6,
d6_test,
type = "class")
summary(bag.covid.test)
summary(rf.covid.test)
table(bag.covid.test, d6_test$DEFUNCION)
table(rf.covid.test, d6_test$DEFUNCION)
table(tree.covid.test, d6_test$DEFUNCION)
table(bag.covid.test, d6_test$DEFUNCION)
table(tree.covid.test, d6_test$DEFUNCION)
table(bag.covid.test, d6_test$DEFUNCION)
table(rf.covid.test, d6_test$DEFUNCION)
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 10,
sampsize = 22988)
### ntree: número de árboles
### mtry : número de variables a considerar. Si se utilizan todas las variables disponibles
###   se considera un bagging.
### sampsize: tamaño de la muestra que toma
### Uso el modelo para predecir sobre la base de prueba
bag.covid.test <- predict(bag.covid_6,
d6_test,
type = "class")
summary(bag.covid.test)
table(bag.covid.test, d6_test$DEFUNCION)
## Random Forest
rf.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 7,
sampsize = 22988)
### Uso el modelo para predecir sobre la base de prueba
rf.covid.test <- predict(rf.covid_6,
d6_test,
type = "class")
summary(rf.covid.test)
table(rf.covid.test, d6_test$DEFUNCION)
tree.covid <- tree(DEFUNCION~., d6_train)
plot(tree.covid)
text(tree.covid, pretty = 0)
## Uso el modelo para predecir sobre la base de prueba
tree.covid.test <- predict(tree.covid,
d6_test,
type = "class")
summary(tree.covid.test)
table(tree.covid.test, d6_test$DEFUNCION)
summar7(tree.covid)
summary(tree.covid)
summary(tree.covid.test)
summary(bag.covid_6)
summary(bag.covid.test)
summary(rf.covid_6)
table(bag.covid.test, d6_test$DEFUNCION)
table(rf.covid.test, d6_test$DEFUNCION)
summary(rf.covid_6)
#### Problema 7 ####
importance(tree.covid)
#### Problema 7 ####
importance(bag.covid_6)
importance(rf.covid_6)
varImpPlot(bag.covid_6)
varImpPlot(rf.covid_6)
table(bag.covid.test, d6_test$DEFUNCION)
por.bag_8 <- ((table(bag.covid.test, d6_test$DEFUNCION)[1,1] +
table(bag.covid.test, d6_test$DEFUNCION)[2,2])/
table(bag.covid.test, d6_test$DEFUNCION)[,])
por.bag_8
(table(bag.covid.test, d6_test$DEFUNCION)[1,1] +
table(bag.covid.test, d6_test$DEFUNCION)[2,2])
por.bag_8 <- ((table(bag.covid.test, d6_test$DEFUNCION)[1,1] +
table(bag.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
remove(por.bag_8)
remove(porc_5)
porc.logit_5 <- sum(dfcomparative_5$Eval_prediccion)/nrow(dfcomparative_5)
porc.logit_5
porc.rf_8 <- ((table(rf.covid.test, d6_test$DEFUNCION)[1,1] +
table(rf.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.bag_8
porc.bag_8 <- ((table(bag.covid.test, d6_test$DEFUNCION)[1,1] +
table(bag.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.bag_8
porc.rf_8
summary(tree.covid)
porc.tree_8 <- ((table(tree.covid.test, d6_test$DEFUNCION)[1,1] +
table(tree.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.tree_8
porc.logit_5
porc.tree_8
porc.logit_5
porc.tree_8
porc.bag_8
porc.rf_8
prediccion_10 <- predict(model_3,data.frame(NEUMONIA=1, EDAD=70, type= "response"))
prediccion_10 <- predict(model_3,data.frame(NEUMONIA=1, EDAD=70), type= "response")
prediccion_10 <- predict(model_3,data.frame(NEUMONIA=1, EDAD=70, UCI=1), type= "response")
bag.covid.test <- predict(bag.covid_6,
d6_test,
type = "response")
summary(bag.covid.test)
table(bag.covid.test, d6_test$DEFUNCION)
porc.bag_8 <- ((table(bag.covid.test, d6_test$DEFUNCION)[1,1] +
table(bag.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.bag_8
## Random Forest
rf.covid.test <- predict(rf.covid_6,
d6_test,
type = "response")
summary(rf.covid.test)
table(rf.covid.test, d6_test$DEFUNCION)
porc.rf_8 <- ((table(rf.covid.test, d6_test$DEFUNCION)[1,1] +
table(rf.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.rf_8
## Árbol de clasificación
tree.covid.test <- predict(tree.covid,
d6_test,
type = "response")
summary(tree.covid.test)
## Hago nuevos objetos de las mismas bases de datos de entrenamiento y prueba
## para trabajar con árboles.
d6_train <- d2_train
d6_test <- d2_test
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 10,
sampsize = 22988)
summary(bag.covid_6)
## Convierto mi variable dependiente en factor para obtener un árbol de clasificación
d6_train$DEFUNCION <- ifelse(d6_train$DEFUNCION == 1, "Si", "No")
d6_train$DEFUNCION <- as.factor(d6_train$DEFUNCION)
## Convierto mi variable dependiente en factor para obtener un árbol de clasificación
d6_train$DEFUNCION <- ifelse(d6_train$DEFUNCION == 1, "Si", "No")
d6_train$DEFUNCION <- as.factor(d6_train$DEFUNCION)
d6_test$DEFUNCION <- ifelse(d6_test$DEFUNCION == 1, "Si", "No")
d6_test$DEFUNCION <- as.factor(d6_test$DEFUNCION)
#### Problema 6 ####
## Hago nuevos objetos de las mismas bases de datos de entrenamiento y prueba
## para trabajar con árboles.
d6_train <- d2_train
d6_test <- d2_test
## Convierto mi variable dependiente en factor para obtener un árbol de clasificación
d6_train$DEFUNCION <- ifelse(d6_train$DEFUNCION == 1, "Si", "No")
d6_train$DEFUNCION <- as.factor(d6_train$DEFUNCION)
d6_test$DEFUNCION <- ifelse(d6_test$DEFUNCION == 1, "Si", "No")
d6_test$DEFUNCION <- as.factor(d6_test$DEFUNCION)
## Bagging
bag.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 10,
sampsize = 22988)
summary(bag.covid_6)
### ntree: número de árboles
### mtry : número de variables a considerar. Si se utilizan todas las variables disponibles
###   se considera un bagging.
### sampsize: tamaño de la muestra que toma
## Random Forest
rf.covid_6 <- randomForest(DEFUNCION~.,
data = d6_train,
ntree = 500,
mtry = 7,
sampsize = 22988)
summary(rf.covid_6)
#### Problema 7 ####
# Importancia de las variables
## Bagging
importance(bag.covid_6)
varImpPlot(bag.covid_6)
## Random Forest
importance(rf.covid_6)
varImpPlot(rf.covid_6)
# La variable más importante para predecir decesos es la edad, seguida de la neumonia.
#### Problema 8 ####
#Uso el modelo para predecir sobre la base de prueba
## Bagging
bag.covid.test <- predict(bag.covid_6,
d6_test,
type = "response")
summary(bag.covid.test)
table(bag.covid.test, d6_test$DEFUNCION)
porc.bag_8 <- ((table(bag.covid.test, d6_test$DEFUNCION)[1,1] +
table(bag.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.bag_8
## Random Forest
rf.covid.test <- predict(rf.covid_6,
d6_test,
type = "response")
summary(rf.covid.test)
table(rf.covid.test, d6_test$DEFUNCION)
porc.rf_8 <- ((table(rf.covid.test, d6_test$DEFUNCION)[1,1] +
table(rf.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.rf_8
#### Problema 9 ####
# Logit me genera un 89.57% de exactitud.
porc.logit_5
# Bagging me genera un 88.74% de exactitud.
porc.bag_8
# Random Forest me genera un 89.13% de exactitud.
porc.rf_8
# La mejor predicción la genera el logit.
#### Problema 10 ####
prediccion_10 <- predict(model_3,data.frame(NEUMONIA=1, EDAD=70), type= "response")
d10 <- d2_test %>%
mutate(NEUMONIA = 1,
EDAD = 70)
View(d10)
prediccion_10 <- predict(model_3, d10, type= "response")
summary(prediccion_10)
plot(density(prediccion_10))
# Hago una nueva base de datos de prueba ajustando todas las edades a 70
# y dándole neumonía a todas las observaciones
d10 <- d2_train %>%
mutate(NEUMONIA = 1,
EDAD = 70)
# Genero mi predicción
prediccion_10 <- predict(model_3, d10, type= "response")
summary(prediccion_10)
plot(density(prediccion_10))
# Hago una nueva base de datos de prueba ajustando todas las edades a 70
# y dándole neumonía a todas las observaciones
d10 <- d2_test %>%
mutate(NEUMONIA = 1,
EDAD = 70)
# Genero mi predicción
prediccion_10 <- predict(model_3, d10, type= "response")
summary(prediccion_10)
plot(density(prediccion_10))
# Depuración y Logit
library(readxl)
library(plyr)
library(dplyr)
library(stringr)
library(sqldf)
library(pscl)
library(ROCR)
# Random Forest
library(ISLR)
library(rpart)
library(rpart.plot)
library(tree)
library(MASS)
library(randomForest)
d11 <- d6_test %>%
mutate(NEUMONIA = 1,
EDAD = 70)
# Genero mi predicción
prediccion_11 <- predict(rf.covid_6, d11, type= "response")
summary(prediccion_11)
plot(density(prediccion_11))
# Genero mi predicción
prediccion_11 <- predict(rf.covid_6, d11, type= "class")
summary(prediccion_11)
remove(d11)
remove(prediccion_11)
bag.covid.test <- predict(bag.covid_6,
d6_test,
type = "class")
summary(bag.covid.test)
table(bag.covid.test, d6_test$DEFUNCION)
porc.bag_8 <- ((table(bag.covid.test, d6_test$DEFUNCION)[1,1] +
table(bag.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.bag_8
## Random Forest
rf.covid.test <- predict(rf.covid_6,
d6_test,
type = "class")
summary(rf.covid.test)
table(rf.covid.test, d6_test$DEFUNCION)
porc.rf_8 <- ((table(rf.covid.test, d6_test$DEFUNCION)[1,1] +
table(rf.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.rf_8
# Logit me genera un 89.57% de exactitud.
porc.logit_5
# Bagging me genera un 88.74% de exactitud.
porc.bag_8
# Random Forest me genera un 89.13% de exactitud.
porc.rf_8
summary(p_3)
plot(density(p_3))
summary(model_3)
## Estimador de McFadden
pR2(model_3)
# Logit me genera un 89.57% de exactitud.
porc.logit_5
# Importancia de las variables
## Bagging
importance(bag.covid_6)
varImpPlot(bag.covid_6)
## Random Forest
importance(rf.covid_6)
varImpPlot(rf.covid_6)
porc.bag_8
summary(prediccion_10)
library(readxl)
library(plyr)
library(dplyr)
library(stringr)
library(sqldf)
library(pscl)
library(ROCR)
# Random Forest
library(ISLR)
library(rpart)
library(rpart.plot)
library(tree)
library(MASS)
library(randomForest)
table(p2_3)
## Junto en una nueva base de datos comparativa mi predicción sobre la defunción de los pacientes
## de la base de prueba y los datos reales de las defunciones de mi base de prueba
dfcomparative_10 <- data.frame(prediccion_10,
"Predicción de defunciones" = ifelse(prediccion_10>0.6166516, 1, 0))
View(dfcomparative_10)
prob.defuncion <- sum(dfcomparative_10$Predicción.de.defunciones)/nrow(dfcomparative_10)
prob.defuncion
plot(density(prediccion_10))
plot(density(logit.predict.test))
sum(dfcomparative_5$Predicción.de.defunciones)/nrow(dfcomparative_5)
library(readxl)
library(plyr)
library(dplyr)
library(stringr)
library(sqldf)
library(pscl)
library(ROCR)
# Random Forest
library(ISLR)
library(rpart)
library(rpart.plot)
library(tree)
library(MASS)
library(randomForest)
# Genero mi predicción
prediccion_10 <- predict(model_3, d10, type= "response")
summary(prediccion_10)
plot(density(prediccion_10))
remove(dfcomparative_10)
remove(prob.defuncion)
summary(model_3)
library(readxl)
library(plyr)
library(dplyr)
library(stringr)
library(sqldf)
library(pscl)
library(ROCR)
# Random Forest
library(ISLR)
library(rpart)
library(rpart.plot)
library(tree)
library(MASS)
library(randomForest)
summary(model_3)
summary(p_3)
plot(density(p_3))
print(c(accuracy=acc, cutoff=cutoff))
summary(logit.predict.test)
View(dfcomparative_5)
porc.logit_5
# Importancia de las variables
## Bagging
importance(bag.covid_6)
varImpPlot(bag.covid_6)
## Random Forest
importance(rf.covid_6)
varImpPlot(rf.covid_6)
summary(bag.covid.test)
table(bag.covid.test, d6_test$DEFUNCION)
porc.bag_8 <- ((table(bag.covid.test, d6_test$DEFUNCION)[1,1] +
table(bag.covid.test, d6_test$DEFUNCION)[2,2])/
nrow(d6_test))
porc.bag_8 # Bagging me genera un 88.82% de clasificaciones correctas.
summary(rf.covid.test)
table(rf.covid.test, d6_test$DEFUNCION)
porc.rf_8 # Random Forest me genera un 89.15% de clasificaciones correctas.
# Logit me genera un 89.58% de clasificaciones correctas.
porc.logit_5
# Bagging me genera un 88.82% de clasificaciones correctas.
porc.bag_8
# Random Forest me genera un 89.15% de clasificaciones correctas.
porc.rf_8
summary(prediccion_10)
plot(density(prediccion_10))
summary(model_3)
# Importancia de las variables
## Bagging
importance(bag.covid_6)
varImpPlot(bag.covid_6)
importance(model_3)
summary(logit.predict.test)
library(readxl)
library(plyr)
library(dplyr)
library(stringr)
library(sqldf)
library(pscl)
library(ROCR)
# Random Forest
library(ISLR)
library(rpart)
library(rpart.plot)
library(tree)
library(MASS)
library(randomForest)
xvect <- c(1,2,3)
MyMat = matrix(c(7,9,8,6,10,12),nrow=2,ncol=3,byrow=TRUE)
MyMat[3]
MyMat[,3]
