Ytitle = "Thousands of Passengers",
Xtitle = "Mes"
)
ts_plot(Elecmensual_20190618[,"Demand"],
slider = TRUE,
type = "multiple",
title = "Demanda mensual de electricidad de Victoria, en Australia, desde enero de 1950",
Ytitle = "Demanda de electricidad [GW]",
Xtitle = "Mes"
)
#Descomposición aditiva
data("AirPassengers")
d <- decompose(AirPassengers)
View(d)
plot(d)
plot(d$random)
#Comparación de las dos descomposiciones
ts_decompose(AirPassengers, type = "both")
ts_decompose(Elecmensual_20190618, type = "both")
ts_decompose(Elecmensual_20190618, type = "both")
ts_decompose(Elecmensual_20190618[,"Demand"], type = "both")
Elecmensual_20190618[,"Demand"]
d <- decompose(Elecmensual_20190618)
d <- decompose(Elecmensual_20190618[,Demand])
d <- decompose(Elecmensual_20190618[,"Demand"])
View(d)
plot(d)
rm(d)
d <- decompose(Elecmensual_20190618[,"Demand"])
View(d)
plot(d)
d <- decompose(Elecmensual_20190618[,"Demand"])
View(Elecmensual_20190618)
View(Elecmensual_20190618)
class(Elecmensual_20190618[Month,])
class(Elecmensual_20190618[, "Month"])
class(Elecmensual_20190618[, "Demand"])
class(Elecmensual_20190618["Month",])
Elecmensual_20190618[,Month] + 1949
Elecmensual_20190618[,Month]
Elecmensual_20190618[Month()]
View(Elecmensual_20190618)
Elecmensual_20190618[Month,]
Elecmensual_20190618["Month",]
Elecmensual_20190618[,"Month"]+1949
Elecmensual_20190618[,"Month"]+ 19491231
as.date(Elecmensual_20190618[,"Month"]+ 19491231)
library(lubridate)
ymd(Elecmensual_20190618[,"Month"]+ 19491231)
ymd(Elecmensual_20190618[,"Month"]+ 19500100)
seq(ymd(1950-01-01):730)
seq(as.Date("2000/1/1"), by = "month", length.out = 12)
yearmonth(seq(as.Date("2000/1/1"), by = "month", length.out = 12))
yearmonth(seq(as.Date("1950/1/1"), by = "month", length.out = 730))
View(Elecmensual_20190618)
Elecmensual_20190618
View(Elecmensual_20190618)
Elecmensual_20190618 <- read_excel("Elecmensual 20190618.xlsx")
Elecmensual_20190618 <- Elecmensual_20190618 %>% select(Date = yearmonth(
seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
),
Demand = Demand,
Temperature = Temperature)
class(Elecmensual_20190618)
Elecmensual_20190618 <- read_excel("Elecmensual 20190618.xlsx")
class(Elecmensual_20190618)
date <- yearmonth(
seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
)
date
class(date)
date <- as_tsibble(date)
date <- as.ts(date)
left_join(date, Elecmensual_20190618)
Elecmensual_20190618 <- read_excel("Elecmensual 20190618.xlsx")
date <- yearmonth(
seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
)
left_join(date, Elecmensual_20190618)
date <- as.data.frame(date)
View(date)
left_join(date, Elecmensual_20190618)
?mutate
Elecmensual_20190618 %>% mutate(Date = date)
Elecmensual_20190618 <-
as.ts(
read_excel("Elecmensual 20190618.xlsx") %>%
transmute(Date = yearmonth(
seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
),
Demand = Demand,
Temperature = Temperature)
)
View(Elecmensual_20190618)
View(Elecmensual_20190618)
Elecmensual_20190618[,Date]
Elecmensual_20190618[,"Date"]
read_excel("Elecmensual 20190618.xlsx") %>%
transmute(Date = yearmonth(
seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
),
Demand = Demand,
Temperature = Temperature)
class(read_excel("Elecmensual 20190618.xlsx") %>%
transmute(Date = yearmonth(
seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
),
Demand = Demand,
Temperature = Temperature))
Elecmensual_20190618 <-
read_excel("Elecmensual 20190618.xlsx") %>%
transmute(Date = yearmonth(
seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
),
Demand = Demand,
Temperature = Temperature)
View(Elecmensual_20190618)
Elecmensual_20190618 <- as.ts(Elecmensual_20190618)
View(Elecmensual_20190618)
Elecmensual_20190618 <-
read_excel("Elecmensual 20190618.xlsx") %>%
transmute(Date =
yearmonth(seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
),
Demand = Demand,
Temperature = Temperature
)
as.ts
?as.ts
ts_plot(Elecmensual_20190618[,"Demand"],
slider = TRUE,
type = "multiple",
title = "Demanda mensual de electricidad de Victoria, en Australia, desde enero de 1950",
Ytitle = "Demanda de electricidad [GW]",
Xtitle = "Mes"
)
rm(Elecmensual_20190618)
rm(AirPassengers)
Elecmensual_20190618.ts <-
read_excel("Elecmensual 20190618.xlsx")
Elecmensual_20190618.tbl <-
read_excel("Elecmensual 20190618.xlsx") %>%
transmute(Date =
yearmonth(seq(as.Date("1950/1/1"),
by = "month",
length.out = 730)
),
Demand = Demand,
Temperature = Temperature
)
ts_plot(Elecmensual_20190618.ts[,"Demand"],
slider = TRUE,
type = "multiple",
title = "Demanda mensual de electricidad de Victoria, en Australia, desde enero de 1950",
Ytitle = "Demanda de electricidad [GW]",
Xtitle = "Mes"
)
View(Elecmensual_20190618.ts)
class(Elecmensual_20190618.ts)
Elecmensual_20190618.ts <-
as.ts(
read_excel("Elecmensual 20190618.xlsx")
)
ts_plot(Elecmensual_20190618.ts[,"Demand"],
slider = TRUE,
type = "multiple",
title = "Demanda mensual de electricidad de Victoria, en Australia, desde enero de 1950",
Ytitle = "Demanda de electricidad [GW]",
Xtitle = "Mes"
)
ts_decompose(Elecmensual_20190618.tbl, type = "both")
ts_decompose(Elecmensual_20190618.ts, type = "both")
d <- decompose(Elecmensual_20190618.tbl)
View(Elecmensual_20190618.tbl)
class(Elecmensual_20190618.tbl[,Date])
class(Elecmensual_20190618.tbl[,"Date"])
autoplot(Elecmensual_20190618.tbl)
plot(Elecmensual_20190618.tbl)
View(Elecmensual_20190618.tbl)
?as.ts
class(date)
rm(date)
Elecmensual_20190618.tbl <-
as_tsibble(Elecmensual_20190618.tbl,
index = "Date")
View(Elecmensual_20190618.tbl)
d <- decompose(Elecmensual_20190618.tbl)
View(Elecmensual_20190618.tbl)
Elecmensual_20190618.tbl
class(Elecmensual_20190618.tbl)
?ts
ts(read_excel("Elecmensual 20190618.xlsx"), start = c(1950,1), end = (2010,10), frequency = 1, deltat = 1/12)
ts(read_excel("Elecmensual 20190618.xlsx"))
ts(read_excel("Elecmensual 20190618.xlsx"), start = c(1950,1), deltat = 1/12)
Elecmensual_20190618.ts <-
as.ts(
read_excel("Elecmensual 20190618.xlsx"),
start = c(1950,1),
deltat = 1/12
)
View(Elecmensual_20190618.ts)
autoplot(Elecmensual_20190618.ts)
Elecmensual_20190618.ts
Elecmensual_20190618.ts <-
as.ts(
read_excel("Elecmensual 20190618.xlsx"),
start = c(1950,1),
deltat = 1/12
)
as.ts(
read_excel("Elecmensual 20190618.xlsx"),
start = c(1950,1),
deltat = 1/12
)
as.ts(read_excel("Elecmensual 20190618.xlsx"), start = c(1950,1),deltat = 1/12)
?twsw
?ts
ts(read_excel("Elecmensual 20190618.xlsx"), start = c(1950,1), end = (2010,10), frequency = 1, deltat = 1/12)
ts(read_excel("Elecmensual 20190618.xlsx"), start = c(1950,1), deltat = 1/12)
Elecmensual_20190618.ts <-
ts(
read_excel("Elecmensual 20190618.xlsx"),
start = c(1950,1),
deltat = 1/12
)
View(Elecmensual_20190618.ts)
Elecmensual_20190618.ts
autoplot(Elecmensual_20190618.ts)
ts_plot(Elecmensual_20190618.ts[,"Demand"],
slider = TRUE,
type = "multiple",
title = "Demanda mensual de electricidad de Victoria, en Australia, desde enero de 1950",
Ytitle = "Demanda de electricidad [GW]",
Xtitle = "Mes"
)
ts_decompose(Elecmensual_20190618.ts, type = "both")
ts_decompose(Elecmensual_20190618.ts[,"Demand"], type = "both")
?ts_decompose
# Transformación de datos a tsibble
datos20_tbl <-
as_tsibble(datos20,
pivot_longer = FALSE)
library(fpp2)
library(fpp3)
library(forecast)
library(readxl)
library(TSstudio)
datos20 <-
head(elecdaily,20)
autoplot(datos20[,"Demand"]) +
ggtitle("Total electricity demand in GW for Victoria, Australia, every day during 2014") +
xlab("Time") +
ylab("Total electricity demand [GW]")
# Transformación de datos a tsibble
datos20_tbl <-
as_tsibble(datos20,
pivot_longer = FALSE)
# Regresión lineal múltiple en datos ts
fit.datos20 <- tslm(Demand ~
Temperature + WorkDay,
data = datos20)
# Regresión lineal múltiple en tsibble
fit.datos20_tbl <- datos20_tbl %>%
model(
TSLM(Demand ~
Temperature + WorkDay)
)
summary(fit.datos20)
# Gráfica de regresión lineal simple (Demanda vs Temperatura)
datos20 %>%
as.data.frame() %>%
ggplot(aes(x = Temperature, y = Demand)) +
ylab("Total Electricity Demand [GW]") +
xlab("Max Temperature [°C]") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#Gráfica de observaciones reales y estimados con Regresión Lineal Múltiple
autoplot(datos20[,"Demand"], series = "Data") +
autolayer(fitted(fit.datos20), series = "Fitted") +
xlab("Day") +
ylab("") +
ggtitle("Total electricity demand in GW for Victoria, Australia, every day during 2014") +
guides(colour = guide_legend(title = ""))
abline(fit.datos20)
lm(formula = Demand ~
Temperature + WorkDay,
data = datos20)
library(feasts)
set.seed(30)
y <- ts(rnorm(50))
autoplot(y) + ggtitle("White noise")
ggAcf(y)
library(ggseas)
library(forecast)
library(data.table)
# Datos
nzdata<-data.table(nzbop)
# Datos
nzdata<-data.table(nzbop)
View(nzdata)
nzdata<-nzdata[!((Account=="Capital account"&
Category=="Balance")|
(Account=="Financial account"&
Category=="Foreign inv. in NZ; Financial derivative liabilities")|
(Category=="Secondary income balance")),]
# Datos
nzdata<-data.table(nzbop)
View(nzdata)
nzbop
?data.table
sample_ts<-
nzdata[Account == "Current account" &
Category=="Services; Exports total",
.(TimePeriod, Value)]
View(nzdata)
View(sample_ts)
knitr::kable(head(sample_ts))
head(sample_ts)
kable?
?kable
# Tendencia
sample_ts[,trend := zoo::rollmean(Value, 8, fill=NA, align = "right")]
# Datos sin la tendencia
sample_ts[,`:=`( detrended_a = Value - trend,  detrended_m = Value / trend )]
# Parte aleatoria
sample_ts[,`:=`( residual_a = detrended_a - seasonal_a,
residual_m = detrended_m / seasonal_m )]
# Estacionalidad
sample_ts[,`:=`(seasonal_a = mean(detrended_a, na.rm = TRUE),
seasonal_m = mean(detrended_m, na.rm = TRUE)),
by=.(quarter(TimePeriod)) ]
# Parte aleatoria
sample_ts[,`:=`( residual_a = detrended_a - seasonal_a,
residual_m = detrended_m / seasonal_m )]
# Gráficas
ggsdc(sample_ts, aes(x = TimePeriod, y = Value), method = "decompose",
frequency = 4, s.window = 8, type = "additive")+ geom_line()+
ggtitle("Aditiva")+ theme_minimal()
ggsdc(sample_ts, aes(x=TimePeriod, y=Value), method = "decompose",
frequency=4, s.window=8, type = "multiplicative")+ geom_line()+
ggtitle("Multiplicativa")+ theme_minimal()
ggAcf(sample_ts$residual_a)
ggAcf(sample_ts$residual_m)
sample_ts$residual_a %>% ur.kpss() %>% summary()
library(fabletools)
library(urca)
sample_ts$residual_a %>% ur.kpss() %>% summary()
sample_ts$residual_m %>% ur.kpss() %>% summary()
knitr::kable(head(sample_ts))
?rollmean
Elecmensual_20190618.ts <-
ts(
read_excel("Elecmensual 20190618.xlsx"),
start = c(1950,1),
deltat = 1/12
)
ts_plot(Elecmensual_20190618.ts[,"Demand"],
slider = TRUE,
type = "multiple",
title = "Demanda mensual de electricidad de Victoria, en Australia, desde enero de 1950",
Ytitle = "Demanda de electricidad [GW]",
Xtitle = "Mes"
)
# Tendencia
Elecmensual_20190618.ts[,trend := zoo::rollmean(Value, 12, fill=NA, align = "right")]
?nzdata
class(nzdata)
Elecmensual_20190618.dt <- as.data.table(Elecmensual_20190618.ts)
View(Elecmensual_20190618.dt)
# Tendencia
Elecmensual_20190618.dt[,trend := zoo::rollmean(Value, 12, fill=NA, align = "right")]
# Tendencia
Elecmensual_20190618.dt[,trend := zoo::rollmean(Demand, 12, fill=NA, align = "right")]
knitr::kable(tail(Elecmensual_20190618.dt))
Elecmensual_20190618.dt
View(Elecmensual_20190618.dt)
# Datos sin la tendencia
Elecmensual_20190618.dt[,`:=`( detrended_a = Demand - trend,  detrended_m = Demand / trend )]
knitr::kable(tail(Elecmensual_20190618.dt))
rm(sample_ts)
View(Elecmensual_20190618.dt)
View(Elecmensual_20190618.dt)
# Estacionalidad
Elecmensual_20190618.dt[,`:=`(seasonal_a = mean(detrended_a, na.rm = TRUE),
seasonal_m = mean(detrended_m, na.rm = TRUE)),
by=.(month(Month)) ]
View(Elecmensual_20190618.ts)
Elecmensual_20190618.ts
?yearmonth
Elecmensual_20190618.dt <- Elecmensual_20190618.dt %>%
mutate(Month =
seq(
as.Date("1950-01-01"),
by = "month",
length.out = 730
)
)
Elecmensual_20190618.dt <- as.data.table(Elecmensual_20190618.ts)
Elecmensual_20190618.dt <- Elecmensual_20190618.dt %>%
mutate(Month =
seq(
as.Date("1950-01-01"),
by = "month",
length.out = 730
)
)
View(Elecmensual_20190618.dt)
Elecmensual_20190618.dt <- as.data.table(Elecmensual_20190618.ts)
Elecmensual_20190618.dt <- Elecmensual_20190618.dt %>%
yearmonth(mutate(Month =
seq(
as.Date("1950-01-01"),
by = "month",
length.out = 730
)
))
View(Elecmensual_20190618.dt)
View(Elecmensual_20190618.ts)
Elecmensual_20190618.dt <- Elecmensual_20190618.dt %>%
mutate(Month =
yearmonth(
seq(
as.Date("1950-01-01"),
by = "month",
length.out = 730
)
)
)
View(Elecmensual_20190618.dt)
class(Elecmensual_20190618.dt)
# Tendencia
Elecmensual_20190618.dt[,trend := zoo::rollmean(Demand, 12, fill=NA, align = "right")]
View(Elecmensual_20190618.dt)
knitr::kable(tail(Elecmensual_20190618.dt))
# Datos sin la tendencia
Elecmensual_20190618.dt[,`:=`( detrended_a = Demand - trend,  detrended_m = Demand / trend )]
knitr::kable(tail(Elecmensual_20190618.dt))
# Estacionalidad
Elecmensual_20190618.dt[,`:=`(seasonal_a = mean(detrended_a, na.rm = TRUE),
seasonal_m = mean(detrended_m, na.rm = TRUE)),
by=.(month(Month)) ]
knitr::kable(tail(sample_ts))
knitr::kable(tail(Elecmensual_20190618.dt))
# Parte aleatoria
Elecmensual_20190618.dt[,`:=`( residual_a = detrended_a - seasonal_a,
residual_m = detrended_m / seasonal_m )]
knitr::kable(tail(Elecmensual_20190618.dt))
View(Elecmensual_20190618.dt)
rm(nzdata)
View(Elecmensual_20190618.dt)
?ggsdc
library(ggseas)
# Gráficas
ggsdc(Elecmensual_20190618.dt,
aes(x = Month, y = Demand),
method = "decompose",
frequency = 12,
s.window = 8,
type = "additive") +
geom_line() +
ggtitle("Aditiva") +
theme_minimal()
ggsdc(Elecmensual_20190618.dt,
aes(x = Month, y = Demand),
method = "decompose",
frequency = 12,
s.window = 8,
type = "multiplicative") +
geom_line() +
ggtitle("Multiplicativa") +
theme_minimal()
ggAcf(sample_ts$residual_a)
ggAcf(Elecmensual_20190618.dt$residual_a)
ggAcf(Elecmensual_20190618.dt$residual_m)
Elecmensual_20190618.dt$residual_a %>% ur.kpss() %>% summary()
Elecmensual_20190618.dt$residual_m %>% ur.kpss() %>% summary()
library(urca)
library(fpp2)
library(fpp2)
library(fpp3)
library(forecast)
library(readxl)
library(TSstudio)
library(ggseas)
library(data.table)
library(urca)
Elecmensual_20190618.ts2 <-
ts(
Elecmensual_20190618.xls$Demand,
start = c(1950,1),
deltat = 1/12
)
fit <- stl(Elecmensual_20190618.ts2, s.window = 7)
autoplot(Elecmensual_20190618.ts, series = "Originales") +
autolayer(seasadj(fit),
series = "Datos desestacionalizados")
