consumed.food.per.person
gap <- #[kg/year]
demand.of.food -
food.produced
number.of.people.without.food <- #[people/year]
gap/
consumed.food.per.person
#flow variables
deforestation <- #[km2/year]
min(gap/max(fertility.of.agricultural.land,1),forest/4)/
intensity
fertility.losses <- #[kg/(km2*year)/year]
fertility.of.agricultural.land *
min(2,(agricultural.land/forest)^x)/
intensity
net.natural.population.increase <- #[people/year]
population *
(exp(log(2)/408)-1)
emigration <- #[people/year]
emigration.ratio *
number.of.people.without.food
#state variables
dfertility.of.agricultural.land <- #[kg/(km2*year)]
-fertility.losses
dforest <- #[km2/year]
ifelse(number.of.people.without.food <= max.percentaje.of.hungry.population * population,
0,
-deforestation)
dagricultural.land <- #[km2/year]
ifelse(number.of.people.without.food <= max.percentaje.of.hungry.population * population,
0,
deforestation)
dpopulation <- #[people/year]
net.natural.population.increase -
emigration
list(c(dfertility.of.agricultural.land,
dagricultural.land,
dforest,
dpopulation),
dfertility.of.agricultural.land = dfertility.of.agricultural.land,
dagricultural.land = dagricultural.land,
dforest = dforest,
dpopulation = dpopulation,
number.of.people.without.food = number.of.people.without.food,
suma = forest + agricultural.land
)
})
}
out2.5 <- ode(y = InitialConditions2,
times = times2,
func = Colapso.De.Civilizaciones2.5,
parms = parameters2.5,
method =intg.method)
out2.5df <- data.frame(out2.5)
#Graficas solo variables de interés
plot(out2.5, which = c("number.of.people.without.food"),
xlab = "years",
ylab = c("Number Of People Without Food [people/year]")
)
#Graficas de variables de estado
plot(out2.5, which = c("population",
"fertility.of.agricultural.land",
"forest",
"agricultural.land"
),
xlab = "years",
ylab = c("Population [people]",
"Fertility of Agricultural Land [kg/km2]",
"Forest [km2]",
"Agricultural Land [km2]"
)
)
#Problema 2.5
# Colapso de Civilizacioes
#Paso 1: cargar la libreria "deSolve" empleando la funcion library()
library("deSolve")
#Considera a los parametros como variables exogenas que no pueden ser modificadas
parameters2.5<-c(consumed.food.per.person = 400, #[kg/(person * year)]
emigration.ratio = 5/100, #[%]
x = 1.84,
max.percentaje.of.hungry.population = 2.5/100 #[%]
)
#para definir tus condiciones iniciales utiiza tus variables de estado
InitialConditions2 <- c(fertility.of.agricultural.land = 5000000, #[kg/(km2 * year)]
agricultural.land = 8, #[km2]
forest = 5000, #[km2]
population = 100000 #[people]
)
times2 <- seq(-1000, #tiempo inicial [years]
1000, #tiempo final [years]
1)# número de repetición de puntos [years]
# Definimos método de integración
intg.method<-c("rk4")
#Especificamos modelo
Colapso.De.Civilizaciones2.5 <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#auxiliary variables
intensity <- approx( #[year]
c(-1000,-500,0,500,800,1000),
c(1,0.9,0.85,0.8,0.775,0.75),
xout = t)$y
food.produced <- #[kg/year]
fertility.of.agricultural.land *
agricultural.land
demand.of.food <- #[kg/year]
population *
consumed.food.per.person
gap <- #[kg/year]
demand.of.food -
food.produced
number.of.people.without.food <- #[people/year]
gap/
consumed.food.per.person
#flow variables
deforestation <- #[km2/year]
min(gap/max(fertility.of.agricultural.land,1),forest/4)/
intensity
fertility.losses <- #[kg/(km2*year)/year]
fertility.of.agricultural.land *
min(2,(agricultural.land/forest)^x)/
intensity
net.natural.population.increase <- #[people/year]
population *
(exp(log(2)/408)-1)
emigration <- #[people/year]
emigration.ratio *
number.of.people.without.food
#state variables
dfertility.of.agricultural.land <- #[kg/(km2*year)]
-fertility.losses
dforest <- #[km2/year]
ifelse(number.of.people.without.food <= max.percentaje.of.hungry.population * population,
0,
-deforestation)
dagricultural.land <- #[km2/year]
ifelse(number.of.people.without.food <= max.percentaje.of.hungry.population * population,
0,
deforestation)
dpopulation <- #[people/year]
net.natural.population.increase -
emigration
list(c(dfertility.of.agricultural.land,
dagricultural.land,
dforest,
dpopulation),
dfertility.of.agricultural.land = dfertility.of.agricultural.land,
dagricultural.land = dagricultural.land,
dforest = dforest,
dpopulation = dpopulation,
number.of.people.without.food = number.of.people.without.food,
suma = forest + agricultural.land
)
})
}
out2.5 <- ode(y = InitialConditions2,
times = times2,
func = Colapso.De.Civilizaciones2.5,
parms = parameters2.5,
method =intg.method)
out2.5df <- data.frame(out2.5)
#Graficas solo variables de interés
plot(out2.5, which = c("number.of.people.without.food"),
xlab = "years",
ylab = c("Number Of People Without Food [people/year]")
)
#Graficas de variables de estado sin política
plot(out2.3, which = c("population",
"fertility.of.agricultural.land",
"forest",
"agricultural.land"
),
main = "Variables de Estado Sin Política",
xlab = "years",
ylab = c("Population [people]",
"Fertility of Agricultural Land [kg/km2]",
"Forest [km2]",
"Agricultural Land [km2]"
)
)
#Graficas de variables de estado
plot(out2.5, which = c("population",
"fertility.of.agricultural.land",
"forest",
"agricultural.land"
),
main = "Variables de Estado Con Política"
xlab = "years",
#Problema 2.5
# Colapso de Civilizacioes
#Paso 1: cargar la libreria "deSolve" empleando la funcion library()
library("deSolve")
#Considera a los parametros como variables exogenas que no pueden ser modificadas
parameters2.5<-c(consumed.food.per.person = 400, #[kg/(person * year)]
emigration.ratio = 5/100, #[%]
x = 1.84,
max.percentaje.of.hungry.population = 2.5/100 #[%]
)
#para definir tus condiciones iniciales utiiza tus variables de estado
InitialConditions2 <- c(fertility.of.agricultural.land = 5000000, #[kg/(km2 * year)]
agricultural.land = 8, #[km2]
forest = 5000, #[km2]
population = 100000 #[people]
)
times2 <- seq(-1000, #tiempo inicial [years]
1000, #tiempo final [years]
1)# número de repetición de puntos [years]
# Definimos método de integración
intg.method<-c("rk4")
#Especificamos modelo
Colapso.De.Civilizaciones2.5 <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#auxiliary variables
intensity <- approx( #[year]
c(-1000,-500,0,500,800,1000),
c(1,0.9,0.85,0.8,0.775,0.75),
xout = t)$y
food.produced <- #[kg/year]
fertility.of.agricultural.land *
agricultural.land
demand.of.food <- #[kg/year]
population *
consumed.food.per.person
gap <- #[kg/year]
demand.of.food -
food.produced
number.of.people.without.food <- #[people/year]
gap/
consumed.food.per.person
#flow variables
deforestation <- #[km2/year]
min(gap/max(fertility.of.agricultural.land,1),forest/4)/
intensity
fertility.losses <- #[kg/(km2*year)/year]
fertility.of.agricultural.land *
min(2,(agricultural.land/forest)^x)/
intensity
net.natural.population.increase <- #[people/year]
population *
(exp(log(2)/408)-1)
emigration <- #[people/year]
emigration.ratio *
number.of.people.without.food
#state variables
dfertility.of.agricultural.land <- #[kg/(km2*year)]
-fertility.losses
dforest <- #[km2/year]
ifelse(number.of.people.without.food <= max.percentaje.of.hungry.population * population,
0,
-deforestation)
dagricultural.land <- #[km2/year]
ifelse(number.of.people.without.food <= max.percentaje.of.hungry.population * population,
0,
deforestation)
dpopulation <- #[people/year]
net.natural.population.increase -
emigration
list(c(dfertility.of.agricultural.land,
dagricultural.land,
dforest,
dpopulation),
dfertility.of.agricultural.land = dfertility.of.agricultural.land,
dagricultural.land = dagricultural.land,
dforest = dforest,
dpopulation = dpopulation,
number.of.people.without.food = number.of.people.without.food,
suma = forest + agricultural.land
)
})
}
out2.5 <- ode(y = InitialConditions2,
times = times2,
func = Colapso.De.Civilizaciones2.5,
parms = parameters2.5,
method =intg.method)
out2.5df <- data.frame(out2.5)
#Graficas solo variables de interés
plot(out2.5, which = c("number.of.people.without.food"),
xlab = "years",
ylab = c("Number Of People Without Food [people/year]")
)
#Graficas de variables de estado sin política
plot(out2.3, which = c("population",
"fertility.of.agricultural.land",
"forest",
"agricultural.land"
),
main = c("Population Sin Política",
"Fertility of Agricultural Land Sin Política",
"Forest Sin Política",
"Agricultural Land Sin Política"),
xlab = "years",
ylab = c("Population [people]",
"Fertility of Agricultural Land [kg/km2]",
"Forest [km2]",
"Agricultural Land [km2]"
)
)
#Graficas de variables de estado
plot(out2.5, which = c("population",
"fertility.of.agricultural.land",
"forest",
"agricultural.land"
),
main = c("Population Con Política",
"Fertility of Agricultural Land Con Política",
"Forest Con Política",
"Agricultural Land Con Política"),
xlab = "years",
ylab = c("Population [people]",
"Fertility of Agricultural Land [kg/km2]",
"Forest [km2]",
"Agricultural Land [km2]"
)
)
#Problema 2.5
# Colapso de Civilizacioes
#Paso 1: cargar la libreria "deSolve" empleando la funcion library()
library("deSolve")
#Considera a los parametros como variables exogenas que no pueden ser modificadas
parameters2.5<-c(consumed.food.per.person = 400, #[kg/(person * year)]
emigration.ratio = 5/100, #[%]
x = 1.84,
max.percentaje.of.hungry.population = 2.5/100 #[%]
)
#para definir tus condiciones iniciales utiiza tus variables de estado
InitialConditions2 <- c(fertility.of.agricultural.land = 5000000, #[kg/(km2 * year)]
agricultural.land = 8, #[km2]
forest = 5000, #[km2]
population = 100000 #[people]
)
times2 <- seq(-1000, #tiempo inicial [years]
1000, #tiempo final [years]
1)# número de repetición de puntos [years]
# Definimos método de integración
intg.method<-c("rk4")
#Especificamos modelo
Colapso.De.Civilizaciones2.5 <- function(t, state, parameters) {
with(as.list(c(state,parameters)), {
#auxiliary variables
intensity <- approx( #[year]
c(-1000,-500,0,500,800,1000),
c(1,0.9,0.85,0.8,0.775,0.75),
xout = t)$y
food.produced <- #[kg/year]
fertility.of.agricultural.land *
agricultural.land
demand.of.food <- #[kg/year]
population *
consumed.food.per.person
gap <- #[kg/year]
demand.of.food -
food.produced
number.of.people.without.food <- #[people/year]
gap/
consumed.food.per.person
#flow variables
deforestation <- #[km2/year]
min(gap/max(fertility.of.agricultural.land,1),forest/4)/
intensity
fertility.losses <- #[kg/(km2*year)/year]
fertility.of.agricultural.land *
min(2,(agricultural.land/forest)^x)/
intensity
net.natural.population.increase <- #[people/year]
population *
(exp(log(2)/408)-1)
emigration <- #[people/year]
emigration.ratio *
number.of.people.without.food
#state variables
dfertility.of.agricultural.land <- #[kg/(km2*year)]
-fertility.losses
dforest <- #[km2/year]
ifelse(number.of.people.without.food <= max.percentaje.of.hungry.population * population,
0,
-deforestation)
dagricultural.land <- #[km2/year]
ifelse(number.of.people.without.food <= max.percentaje.of.hungry.population * population,
0,
deforestation)
dpopulation <- #[people/year]
net.natural.population.increase -
emigration
list(c(dfertility.of.agricultural.land,
dagricultural.land,
dforest,
dpopulation),
dfertility.of.agricultural.land = dfertility.of.agricultural.land,
dagricultural.land = dagricultural.land,
dforest = dforest,
dpopulation = dpopulation,
number.of.people.without.food = number.of.people.without.food,
suma = forest + agricultural.land
)
})
}
out2.5 <- ode(y = InitialConditions2,
times = times2,
func = Colapso.De.Civilizaciones2.5,
parms = parameters2.5,
method =intg.method)
out2.5df <- data.frame(out2.5)
#Graficas solo variables de interés
plot(out2.5, which = c("number.of.people.without.food"),
xlab = "years",
ylab = c("Number Of People Without Food [people/year]")
)
#Graficas de variables de estado sin política
plot(out2.3, which = c("population",
"fertility.of.agricultural.land",
"forest",
"agricultural.land"
),
main = c("Population Sin Política",
"Fertility of Agricultural Land Sin Política",
"Forest Sin Política",
"Agricultural Land Sin Política"),
xlab = "years",
ylab = c("Population [people]",
"Fertility of Agricultural Land [kg/km2]",
"Forest [km2]",
"Agricultural Land [km2]"
)
)
#Graficas de variables de estado
plot(out2.5, which = c("population",
"fertility.of.agricultural.land",
"forest",
"agricultural.land"
),
main = c("Population Con Política",
"Fertility of Agricultural Land Con Política",
"Forest Con Política",
"Agricultural Land Con Política"),
xlab = "years",
ylab = c("Population [people]",
"Fertility of Agricultural Land [kg/km2]",
"Forest [km2]",
"Agricultural Land [km2]"
)
)
# Diagramas de fase
library("ggplot2")
library("ggpubr")
#Escenario Sin Política
population.phase.diagram.SP <-
ggplot(out2.3df, aes(x=population, y=dpopulation)) +
geom_point() +
geom_path(aes(colour = times2),
arrow = arrow()
)
fertility.of.agricultural.land.phase.diagram.SP <-
ggplot(out2.3df, aes(x=fertility.of.agricultural.land, y=dfertility.of.agricultural.land)) +
geom_point()+
geom_path(aes(colour = times2),
arrow = arrow()
)
forest.phase.diagram.SP <-
ggplot(out2.3df, aes(x=forest, y=dforest)) +
geom_point()+
geom_path(aes(colour = times2),
arrow = arrow()
)
agricultural.land.phase.diagram.SP <-
ggplot(out2.3df, aes(x=agricultural.land, y=dagricultural.land)) +
geom_point()+
geom_path(aes(colour = times2),
arrow = arrow()
)
ggarrange(population.phase.diagram.SP,
fertility.of.agricultural.land.phase.diagram.SP,
forest.phase.diagram.SP,
agricultural.land.phase.diagram.SP,
labels =
c("Population [People]", "Fertility of Agricultural Land [kg/km2]",
"Forest [km2]", "Agricultural Land [km2]"),
ncol = 2, nrow = 2)
#Escenario Con Política
population.phase.diagram.CP <-
ggplot(out2.5df, aes(x=population, y=dpopulation)) +
geom_point() +
geom_path(aes(colour = times2),
arrow = arrow()
)
fertility.of.agricultural.land.phase.diagram.CP <-
ggplot(out2.5df, aes(x=fertility.of.agricultural.land, y=dfertility.of.agricultural.land)) +
geom_point()+
geom_path(aes(colour = times2),
arrow = arrow()
)
forest.phase.diagram.CP <-
ggplot(out2.5df, aes(x=forest, y=dforest)) +
geom_point()+
geom_path(aes(colour = times2),
arrow = arrow()
)
agricultural.land.phase.diagram.CP <-
ggplot(out2.5df, aes(x=agricultural.land, y=dagricultural.land)) +
geom_point()+
geom_path(aes(colour = times2),
arrow = arrow()
)
ggarrange(population.phase.diagram.CP,
fertility.of.agricultural.land.phase.diagram.CP,
forest.phase.diagram.CP,
agricultural.land.phase.diagram.CP,
labels =
c("Population [People]", "Fertility of Agricultural Land [kg/km2]",
"Forest [km2]", "Agricultural Land [km2]"),
ncol = 2, nrow = 2)
View(out2.3df)
View(out2.5df)
